[{"content":"<h3 id=\"-defining-a-component-subclass\">Defining a Component Subclass</h3><p>Often times, your components will just encapsulate certain snippets of\nHandlebars templates that you find yourself using over and over. In\nthose cases, you do not need to write any JavaScript at all. Just define\nthe Handlebars template as described above and use the component that is\ncreated.</p><p>If you need to customize the behavior of the component you’ll\nneed to define a subclass of <code>Ember.Component</code>. For example, you would\nneed a custom subclass if you wanted to change a component’s element,\nrespond to actions from the component’s template, or manually make\nchanges to the component’s element using JavaScript.</p><p>Ember knows which subclass powers a component based on its name. For\nexample, if you have a component called <code>blog-post</code>, you would create a\nsubclass called <code>App.BlogPostComponent</code>. If your component was called\n<code>audio-player-controls</code>, the class name would be\n<code>App.AudioPlayerControlsComponent</code>.</p><p>In other words, Ember will look for a class with the camelized name of\nthe component, followed by <code>Component</code>.</p>","link":"./v1.10.0/components/defining-a-component.html","spaLink":"#/v1.10.0/components/defining-a-component","title":"Defining a Component Subclass"},{"content":"<h3 id=\"-customizing-the-element\">Customizing the Element</h3><p>To use a tag other than <code>div</code>, subclass <code>Ember.Component</code> and assign it\na <code>tagName</code> property. This property can be any valid HTML5 tag name as a\nstring.</p>","link":"./v1.10.0/components/customizing-a-components-element.html","spaLink":"#/v1.10.0/components/customizing-a-components-element","title":"Customizing the Element"},{"content":"<h3 id=\"-customizing-class-names\">Customizing Class Names</h3><p>You can also specify which class names are applied to the component’s\nelement by setting its <code>classNames</code> property to an array of strings:</p><p>If you want class names to be determined by properties of the component,\nyou can use class name bindings. If you bind to a Boolean property, the\nclass name will be added or removed depending on the value:</p><p>This component would render the following:</p><p>If <code>isUrgent</code> is changed to <code>false</code>, then the <code>is-urgent</code> class name will be removed.</p><p>By default, the name of the Boolean property is dasherized. You can customize the class name\napplied by delimiting it with a colon:</p><p>This would render this HTML:</p><p>Besides the custom class name for the value being <code>true</code>, you can also specify a class name which is used when the value is <code>false</code>:</p><p>This would render this HTML:</p><p>You can also specify a class which should only be added when the property is\n<code>false</code> by declaring <code>classNameBindings</code> like this:</p><p>This would render this HTML:</p><p>If the <code>isEnabled</code> property is set to <code>true</code>, no class name is added:</p><p>If the bound property’s value is a string, that value will be added as a class name without\nmodification:</p><p>This would render this HTML:</p>","link":"./v1.10.0/components/customizing-a-components-element.html","spaLink":"#/v1.10.0/components/customizing-a-components-element","title":"Customizing Class Names"},{"content":"<h3 id=\"-customizing-attributes\">Customizing Attributes</h3><p>You can bind attributes to the DOM element that represents a component\nby using <code>attributeBindings</code>:</p><p>You can also bind these attributes to differently named properties:</p>","link":"./v1.10.0/components/customizing-a-components-element.html","spaLink":"#/v1.10.0/components/customizing-a-components-element","title":"Customizing Attributes"},{"content":"<h3 id=\"-example\">Example</h3><p>Here is an example todo application that shows completed todos with a\nred background:</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/duzala/1/embed?live\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p><p><strong>Note:</strong> The binding functionality in this very simple example could also be implemented without\nthe use of <code>Ember.Component</code> but by simply <a href=\"../../templates/binding-element-attributes\">binding element attributes</a> or <a href=\"../../templates/binding-element-class-names\">binding element class names</a>.</p>","link":"./v1.10.0/components/customizing-a-components-element.html","spaLink":"#/v1.10.0/components/customizing-a-components-element","title":"Example"},{"content":"<h3 id=\"-sending-a-primary-action\">Sending a Primary Action</h3><p>Many components only send one kind of action. For example, a button\ncomponent might send an action when it is clicked on; this is the\n<em>primary action</em>.</p><p>To set a component’s primary action, set its <code>action</code> attribute in\nHandlebars:</p><p>This tells the <code>my-button</code> component that it should send the <code>showUser</code>\naction when it triggers its primary action.</p><p>So how do you trigger sending a component’s primary action? After\nthe relevant event occurs, you can call the <code>sendAction()</code> method\nwithout arguments:</p><p>In the above example, the <code>my-button</code> component will send the <code>showUser</code>\naction when the component is clicked.</p>","link":"./v1.10.0/components/sending-actions-from-components-to-your-application.html","spaLink":"#/v1.10.0/components/sending-actions-from-components-to-your-application","title":"Sending a Primary Action"},{"content":"<h3 id=\"-sending-parameters-with-an-action\">Sending Parameters with an Action</h3><p>You may want to provide additional context to the route or controller\nhandling an action. For example, a button component may want to tell a\ncontroller not only that <em>an</em> item was deleted, but also <em>which</em> item.</p><p>To send parameters with the primary action, call <code>sendAction()</code> with the\nstring <code>'action'</code> as the first argument and any additional parameters\nfollowing it:</p><p>For example, imagine we’re building a todo list that allows the user to\ndelete a todo:</p><p>We want to update this app so that, before actually deleting a todo, the\nuser must confirm that this is what they intended. We’ll implement a\ncomponent that first double-checks with the user before completing the\naction.</p><p>In the component, when triggering the primary action, we’ll pass an\nadditional argument that the component user can specify:</p><p>Now we can update our initial template and replace the <code>{{action}}</code>\nhelper with our new component:</p><p>Note that we’ve specified the action to send by setting the component’s\n<code>action</code> attribute, and we’ve specified which argument should be sent as\na parameter by setting the component’s <code>param</code> attribute.</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/mucilo/embed?live\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/components/sending-actions-from-components-to-your-application.html","spaLink":"#/v1.10.0/components/sending-actions-from-components-to-your-application","title":"Sending Parameters with an Action"},{"content":"<h3 id=\"-sending-multiple-actions\">Sending Multiple Actions</h3><p>Depending on the complexity of your component, you may need to let users\nspecify multiple different actions for different events that your\ncomponent can generate.</p><p>For example, imagine that you’re writing a form component that the user\ncan either submit or cancel. Depending on which button the user clicks,\nyou want to send a different action to your controller or route.</p><p>You can specify <em>which</em> action to send by passing the name of the event\nas the first argument to <code>sendAction()</code>. For example, you can specify two\nactions when using the form component:</p><p>In this case, you can send the <code>createUser</code> action by calling\n<code>this.sendAction('submit')</code>, or send the <code>cancelUserCreation</code> action by\ncalling <code>this.sendAction('cancel')</code>.</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/qafaq/embed?live\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/components/sending-actions-from-components-to-your-application.html","spaLink":"#/v1.10.0/components/sending-actions-from-components-to-your-application","title":"Sending Multiple Actions"},{"content":"<h3 id=\"-actions-that-arent-specified\">Actions That Aren’t Specified</h3><p>If someone using your component does not specify an action for a\nparticular event, calling <code>sendAction()</code> has no effect.</p><p>For example, if you define a component that triggers the primary action\non click:</p><p>Using this component without assigning a primary action will have no\neffect if the user clicks it:</p>","link":"./v1.10.0/components/sending-actions-from-components-to-your-application.html","spaLink":"#/v1.10.0/components/sending-actions-from-components-to-your-application","title":"Actions That Aren’t Specified"},{"content":"<h3 id=\"-thinking-about-component-actions\">Thinking About Component Actions</h3><p>In general, you should think of component actions as translating a\n<em>primitive event</em> (like a mouse click or an <code>&lt;audio&gt;</code> element’s <code>pause</code>\nevent) into actions that have meaning within your application.</p><p>This allows your routes and controllers to implement action handlers\nwith names like <code>deleteTodo</code> or <code>songDidPause</code> instead of vague names\nlike <code>click</code> or <code>pause</code> that may be ambiguous to other developers when\nread out of context.</p><p>Another way to think of component actions is as the <em>public API</em> of your\ncomponent. Thinking about which events in your component can trigger\nactions in their application is the primary way other developers will\nuse your component. In general, keeping these events as generic as\npossible will lead to components that are more flexible and reusable.</p>","link":"./v1.10.0/components/sending-actions-from-components-to-your-application.html","spaLink":"#/v1.10.0/components/sending-actions-from-components-to-your-application","title":"Thinking About Component Actions"},{"content":"<h3 id=\"-concepts\">Concepts</h3><p>A <strong>template</strong>, written in the Handlebars templating language, describes\nthe user interface of your application. Each template is backed by a\nmodel, and the template automatically updates itself if the model changes.</p><p>In addition to plain HTML, templates can contain:</p><ul>\n<li><strong>Expressions</strong>, like <code>{{firstName}}</code>, which take information from\nthe template’s model and put it into HTML.</li>\n<li><strong>Outlets</strong>, which are placeholders for other templates. As users\nmove around your app, different templates can be plugged into the\noutlet by the router. You can put outlets into your template using the\n<code>{{outlet}}</code> helper.</li>\n<li><strong>Components</strong>, custom HTML elements that you can use to clean up\nrepetitive templates or create reusable controls.</li>\n</ul><p>The <strong>router</strong> translates a URL into a series of nested templates, each\nbacked by a model. As the templates or models being shown to the user\nchange, Ember automatically keeps the URL in the browser’s address bar\nup-to-date.</p><p>This means that, at any point, users are able to share the URL of your\napp. When someone clicks the link, they reliably see the same content as\nthe original user.</p><p>A <strong>component</strong> is a custom HTML tag whose behavior you implement using\nJavaScript and whose appearance you describe using Handlebars templates.\nThey allow you to create reusable controls that can simplify your\napplication’s templates.</p><p>A <strong>model</strong> is an object that stores <em>persistent state</em>. Templates are\nresponsible for displaying the model to the user by turning it into\nHTML. In many applications, models are loaded via an HTTP JSON API,\nalthough Ember is agnostic to the backend that you choose.</p><p>A <strong>route</strong> is an object that tells the template which model it should\ndisplay.</p><p>A <strong>controller</strong> is an object that stores <em>application state</em>. A\ntemplate can optionally have a controller in addition to a model, and\ncan retrieve properties from both.</p><p>These are the core concepts you’ll need to understand as you develop\nyour Ember.js app. They are designed to scale up in complexity, so that\nadding new functionality doesn’t force you to go back and refactor major \nparts of your app.</p><p>Now that you understand the roles of these objects, you’re equipped to\ndive deep into Ember.js and learn the details of how each of these\nindividual pieces work.</p>","link":"./v1.10.0/concepts/core-concepts.html","spaLink":"#/v1.10.0/concepts/core-concepts","title":"Concepts"},{"content":"<h2 id=\"-the-application\">The Application</h2><p>When your application boots, Ember will look for these objects:</p><ul>\n<li><code>App.ApplicationRoute</code></li>\n<li><code>App.ApplicationController</code></li>\n<li>the <code>application</code> template</li>\n</ul><p>Ember.js will render the <code>application</code> template as the main template.\nIf <code>App.ApplicationController</code> is provided, Ember.js will set an\ninstance of <code>App.ApplicationController</code> as the controller for the\ntemplate. This means that the template will get its properties from\nthe controller.</p><p>If your app provides an <code>App.ApplicationRoute</code>, Ember.js will invoke\n<a href=\"/guides/routing/specifying-a-routes-model\">the</a> <a href=\"/guides/routing/setting-up-a-controller\">router’s</a> <a href=\"/guides/routing/rendering-a-template\">hooks</a> first, before rendering the\n<code>application</code> template. Hooks are implemented as methods and provide \nyou access points within an Ember object’s lifecycle to intercept and \nexecute code to modify the default behavior at these points to meet \nyour needs. Ember provides several hooks for you to utilize for various\npurposes (e.g. <code>model</code>, <code>setupController</code>, etc). In the example below \n<code>App.ApplicationRoute</code>, which is an <code>Ember.Route</code> object, implements \nthe <code>setupController</code> hook.</p><p>Here’s a simple example that uses a route, controller, and template:</p><p>In Ember.js applications, you will always specify your controllers\nas <strong>classes</strong>, and the framework is responsible for instantiating\nthem and providing them to your templates.</p><p>This makes it super-simple to test your controllers, and ensures that\nyour entire application shares a single instance of each controller.</p>","link":"./v1.10.0/concepts/naming-conventions.html","spaLink":"#/v1.10.0/concepts/naming-conventions","title":"THE APPLICATION"},{"content":"<h2 id=\"-simple-routes\">Simple Routes</h2><p>Each of your routes will have a controller, and a template with the \nsame name as the route.</p><p>Let’s start with a simple router:</p><p>If your user navigates to <code>/favorites</code>, Ember.js will look for these\nobjects:</p><ul>\n<li><code>App.FavoritesRoute</code></li>\n<li><code>App.FavoritesController</code></li>\n<li>the <code>favorites</code> template</li>\n</ul><p>Ember.js will render the <code>favorites</code> template into the <code>{{outlet}}</code>\nin the <code>application</code> template. It will set an instance of the\n<code>App.FavoritesController</code> as the controller for the template.</p><p>If your app provides an <code>App.FavoritesRoute</code>, the framework will\ninvoke it before rendering the template. Yes, this is a bit\nrepetitive.</p><p>For a route like <code>App.FavoritesRoute</code>, you will probably implement\nthe <code>model</code> hook to specify what model your controller will present\nto the template.</p><p>Here’s an example:</p><p>In this example, we didn’t provide a <code>FavoritesController</code>. Because\nthe model is an Array, Ember.js will automatically supply an instance\nof <code>Ember.ArrayController</code>, which will present the backing Array as\nits model.</p><p>You can treat the <code>ArrayController</code> as if it was the model itself.\nThis has two major benefits:</p><ul>\n<li>You can replace the controller’s model at any time without having\nto directly notify the view of the change.</li>\n<li>The controller can provide additional computed properties or\nview-specific state that do not belong in the model layer. This\nallows a clean separation of concerns between the view, the\ncontroller and the model.</li>\n</ul><p>The template can iterate over the elements of the controller:</p>","link":"./v1.10.0/concepts/naming-conventions.html","spaLink":"#/v1.10.0/concepts/naming-conventions","title":"SIMPLE ROUTES"},{"content":"<h2 id=\"-dynamic-segments\">Dynamic Segments</h2><p>If a route uses a dynamic segment (a URL that includes a parameter), the route’s model will be based\non the value of that segment provided by the user.</p><p>Consider this router definition:</p><p>In this case, the route’s name is <code>post</code>, so Ember.js will look for\nthese objects:</p><ul>\n<li><code>App.PostRoute</code></li>\n<li><code>App.PostController</code></li>\n<li>the <code>post</code> template</li>\n</ul><p>Your route handler’s <code>model</code> hook converts the dynamic <code>:post_id</code>\nparameter into a model. The <code>serialize</code> hook converts a model object\nback into the URL parameters for this route (for example, when\ngenerating a link for a model object).</p><p>Because this pattern is so common, it is the default for route\nhandlers.</p><ul>\n<li>If your dynamic segment ends in <code>_id</code>, the default <code>model</code>\nhook will convert the first part into a model class on the\napplication’s namespace (<code>post</code> becomes <code>App.Post</code>). It will\nthen call <code>find</code> on that class with the value of the dynamic\nsegment.</li>\n<li>The default behaviour of the <code>serialize</code> hook is to replace \nthe route’s dynamic segment with the value of the model \nobject’s <code>id</code> property.</li>\n</ul>","link":"./v1.10.0/concepts/naming-conventions.html","spaLink":"#/v1.10.0/concepts/naming-conventions","title":"DYNAMIC SEGMENTS"},{"content":"<h2 id=\"-route-controller-and-template-defaults\">Route, Controller and Template Defaults</h2><p>If you don’t specify a route handler for the <code>post</code> route\n(<code>App.PostRoute</code>), Ember.js  will still render the <code>post</code>\ntemplate with the app’s instance of <code>App.PostController</code>.</p><p>If you don’t specify the controller (<code>App.PostController</code>),\nEmber will automatically make one for you based on the return value\nof the route’s <code>model</code> hook. If the model is an Array, you get an\n<code>ArrayController</code>. Otherwise, you get an <code>ObjectController</code>.</p><p>If you don’t specify a <code>post</code> template, Ember.js won’t render\nanything!</p>","link":"./v1.10.0/concepts/naming-conventions.html","spaLink":"#/v1.10.0/concepts/naming-conventions","title":"ROUTE, CONTROLLER AND TEMPLATE DEFAULTS"},{"content":"<h2 id=\"-nesting\">Nesting</h2><p>You can nest routes under a <code>resource</code>.</p><p>A <strong>resource</strong> is the beginning of a route, controller, or template\nname. Even though the <code>post</code> resource is nested, its route is named\n<code>App.PostRoute</code>, its controller is named <code>App.PostController</code> and its\ntemplate is <code>post</code>.</p><p>When you nest a <strong>route</strong> inside a resource, the route name is added\nto the resource name, after a <code>.</code>.</p><p>Here are the naming conventions for each of the routes defined in\nthis router:</p><p>The rule of thumb is to use resources for nouns, and routes for\nadjectives (<code>favorites</code>) or verbs (<code>edit</code>). This ensures that\nnesting does not create ridiculously long names, but avoids\ncollisions with common adjectives and verbs.</p>","link":"./v1.10.0/concepts/naming-conventions.html","spaLink":"#/v1.10.0/concepts/naming-conventions","title":"NESTING"},{"content":"<h2 id=\"-the-index-route\">The Index Route</h2><p>At every level of nesting (including the top level), Ember.js\nautomatically provides a route for the <code>/</code> path named <code>index</code>.</p><p>For example, if you write a simple router like this:</p><p>It is the equivalent of:</p><p>If the user visits <code>/</code>, Ember.js will look for these objects:</p><ul>\n<li><code>App.IndexRoute</code></li>\n<li><code>App.IndexController</code></li>\n<li>the <code>index</code> template</li>\n</ul><p>The <code>index</code> template will be rendered into the <code>{{outlet}}</code> in the\n<code>application</code> template. If the user navigates to <code>/favorites</code>,\nEmber.js will replace the <code>index</code> template with the <code>favorites</code>\ntemplate.</p><p>A nested router like this:</p><p>Is the equivalent of:</p><p>If the user navigates to <code>/posts</code>, the current route will be\n<code>posts.index</code>. Ember.js will look for objects named:</p><ul>\n<li><code>App.PostsIndexRoute</code></li>\n<li><code>App.PostsIndexController</code></li>\n<li>The <code>posts/index</code> template</li>\n</ul><p>First, the <code>posts</code> template will be rendered into the <code>{{outlet}}</code>\nin the <code>application</code> template. Then, the <code>posts/index</code> template\nwill be rendered into the <code>{{outlet}}</code> in the <code>posts</code> template.</p><p>If the user then navigates to <code>/posts/favorites</code>, Ember.js will\nreplace the <code>{{outlet}}</code> in the <code>posts</code> template with the\n<code>posts/favorites</code> template.</p>","link":"./v1.10.0/concepts/naming-conventions.html","spaLink":"#/v1.10.0/concepts/naming-conventions","title":"THE INDEX ROUTE"},{"content":"<h2 id=\"-what-is-emberjs\">What is Ember.js?</h2><p>Ember.js is a JavaScript framework for creating ambitious web\napplications. It helps you:</p>","link":"./v1.10.0/concepts/what-is-ember-js.html","spaLink":"#/v1.10.0/concepts/what-is-ember-js","title":"WHAT IS EMBER.JS?"},{"content":"<h3 id=\"-what-is-emberjs-enhancing-javascript\">Enhancing JavaScript</h3>","link":"./v1.10.0/concepts/what-is-ember-js.html","spaLink":"#/v1.10.0/concepts/what-is-ember-js","title":"Enhancing JavaScript"},{"content":"<h3 id=\"-what-is-emberjs-eliminating-boilerplate\">Eliminating Boilerplate</h3><p>There are some things that every web app developer has to do. For\nexample, everyone has written code that loads data from a server,\nrenders it to the screen, then updates if it changes.</p><p>Since the tools provided to do this by the browser are quite primitive,\nyou end up writing the same code over and over. Ember.js provides tools\nthat let you focus on your app instead of writing the same code you’ve\nwritten a hundred times.</p><p>Because we’ve built many applications ourselves, we’ve extracted\npatterns that go beyond low-level event-driven abstractions. We’ve\neliminated much of the boilerplate associated with propagating changes\nthroughout your application, and especially into the DOM itself.</p><p>For example, to help manage changes in the view, Ember.js comes with a\ntemplating engine that will automatically update the DOM when the\nobject it is bound to changes.</p><p>For a simple example, consider this template:</p><p>As with any templating system, when the template is initially rendered,\nit will reflect the current state of the person.  In Ember.js, though,\nwe also update the DOM automatically for you if the person’s name or age\nchanges—no re-render or update code needed. Just specify your template\nonce, and Ember makes sure it stays up-to-date.</p><p>Templates are just one example. As you read through these guides, you’ll\nsee how Ember.js allows you to forget about stuff that you’d have to\nhandle manually in other frameworks—from data persistence to memory\nmanagement.</p>","link":"./v1.10.0/concepts/what-is-ember-js.html","spaLink":"#/v1.10.0/concepts/what-is-ember-js","title":"Eliminating Boilerplate"},{"content":"<h3 id=\"-what-is-emberjs-application-architecture\">Application Architecture</h3><p>Since web applications evolved from web pages, which were nothing more\nthan static documents, the primitive APIs supplied by the browser give\nyou just enough rope to hang yourself with.</p><p>Ember.js helps you build your app with a clear separation of concerns in\nmind, leading to code that is more modular, more testable, and more\nconsistent.</p><p>We also supply built-in support for state management, so you’ll have\na way to describe how your application moves through various nested states\n(like signed-out, signed-in, viewing-post, and viewing-comment) out of the box.</p>","link":"./v1.10.0/concepts/what-is-ember-js.html","spaLink":"#/v1.10.0/concepts/what-is-ember-js","title":"Application Architecture"},{"content":"<h3 id=\"-what-is-emberjs-emberjs-at-a-glance\">Ember.js at a Glance</h3><p>These are the three features that make Ember a joy to use:</p><p>Use bindings to keep properties between two different objects in sync. You just\ndeclare a binding once, and Ember will make sure changes get propagated in either\ndirection.</p><p>Here’s how you create a binding between two objects:</p><p>Bindings allow you to architect your application using the MVC (Model-View-Controller)\npattern, then rest easy knowing that data will always flow correctly from layer to layer.</p><p>Computed properties allow you to treat a function like a property:</p><p>Computed properties are useful because they can work with bindings, just\nlike any other property.</p><p>Many computed properties have dependencies on other properties. For example, in the above\nexample, the <code>fullName</code> property depends on <code>firstName</code> and <code>lastName</code> to determine its value.\nYou can tell Ember about these dependencies like this:</p><p>Make sure you list these dependencies so Ember knows when to update bindings that connect\nto a computed property.</p><p>Ember uses Handlebars, a semantic templating library. To take data from your JavaScript application\nand put it into the DOM, create a <code>&lt;script&gt;</code> tag and put it into your HTML, wherever you’d like the\nvalue to appear:</p><p>Here’s the best part: templates are bindings-aware. That means that if you ever change the value of\nthe property that you told us to display, we’ll update it for you automatically. And because you’ve\nspecified dependencies, changes to <em>those</em> properties are reflected as well.</p><p>Hopefully you can see how all three of these powerful tools work together: start with some primitive\nproperties, then start building up more sophisticated properties and their dependencies using computed\nproperties. Once you’ve described the data, you only have to say how it gets displayed once, and Ember\ntakes care of the rest. It doesn’t matter how the underlying data changes, whether from an XHR request\nor the user performing an action; your user interface always stays up-to-date. This eliminates entire\ncategories of edge cases that developers struggle with every day.</p>","link":"./v1.10.0/concepts/what-is-ember-js.html","spaLink":"#/v1.10.0/concepts/what-is-ember-js","title":"Ember.js at a Glance"},{"content":"<h3 id=\"-what-is-emberjs-differences-from-server-side-mvc\">Differences from Server-Side MVC</h3><p>A common misconception about Ember.js’s MVC implementation is that it must be similar to that of Ruby on Rails. This is incorrect. </p><p>The reason for this difference is due to Ruby on Rails being a server-side framework, whereas Ember is a client-side framework.[1]</p><p>Ember runs in the browser, so it can detect and respond to browser events such as mouse clicks, finger taps, scrolling, key presses, etc. The view objects that receive these events can then send them to controller objects, which can work with the data model to save changes. Everything happens client-side, in the browser, and ember-data takes care of sending and receiving appropriate data to and from the server API.</p><p>Rails, on the other hand, runs on the server. As such, it can only communicate with the client through HTTP requests. Rather than receive direct user events, the server takes HTTP requests as input (GET /, POST /users/1, etc.), reads the route and maps it to a controller action. The controller then interacts with the model and the view templates to construct a response (usually in the form of an HTML document) to send back over HTTP. The user is always interacting with what is basically a flat page, assembled on demand for them based on their requests.</p><p>It is important to keep this difference in mind when architecting your applications. </p><p>[1] Although it is possible to use Ember.js on the server side, that is beyond the scope of this guide.</p>","link":"./v1.10.0/concepts/what-is-ember-js.html","spaLink":"#/v1.10.0/concepts/what-is-ember-js","title":"Differences from Server-Side MVC"},{"content":"<h3 id=\"-life-without-prototype-extension\">Life Without Prototype Extension</h3><p>In order for your application to behave correctly, you will need to\nmanually extend or create the objects that the native objects were\ncreating before.</p><p>Native arrays will no longer implement the functionality needed to\nobserve them. If you disable prototype extension and attempt to use\nnative arrays with things like a template’s <code>{{#each}}</code> helper, Ember.js\nwill have no way to detect changes to the array and the template will\nnot update as the underlying array changes.</p><p>Additionally, if you try to set the model of an\n<code>Ember.ArrayController</code> to a plain native array, it will raise an\nexception since it no longer implements the <code>Ember.Array</code> interface.</p><p>You can manually coerce a native array into an array that implements the\nrequired interfaces using the convenience method <code>Ember.A</code>:</p><p>Strings will no longer have the convenience methods described in the\n<a href=\"http://emberjs.com/api/classes/Ember.String.html\">Ember.String API reference.</a>. Instead,\nyou can use the similarly-named methods of the <code>Ember.String</code> object and\npass the string to use as the first parameter:</p><p>To annotate computed properties, use the <code>Ember.computed()</code> method to\nwrap the function:</p><p>Observers are annotated using <code>Ember.observer()</code>:</p>","link":"./v1.10.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v1.10.0/configuring-ember/disabling-prototype-extensions","title":"Life Without Prototype Extension"},{"content":"<h3 id=\"-changing-the-root-element\">Changing the Root Element</h3><p>By default, your application will render the <a href=\"../../templates/the-application-template\">application\ntemplate</a> and attach it to\nthe document’s <code>body</code> element.</p><p>You can tell the application to append the application template to a\ndifferent element by specifying its <code>rootElement</code> property:</p><p>This property can be specified as either an element or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector\nstring</a>.</p>","link":"./v1.10.0/configuring-ember/embedding-applications.html","spaLink":"#/v1.10.0/configuring-ember/embedding-applications","title":"Changing the Root Element"},{"content":"<h3 id=\"-disabling-url-management\">Disabling URL Management</h3><p>You can prevent Ember from making changes to the URL by <a href=\"../../routing/specifying-the-location-api\">changing the\nrouter’s <code>location</code></a> to\n<code>none</code>:</p>","link":"./v1.10.0/configuring-ember/embedding-applications.html","spaLink":"#/v1.10.0/configuring-ember/embedding-applications","title":"Disabling URL Management"},{"content":"<h2 id=\"-about-features\">About Features</h2><p>When a new feature is added to Ember they will be written in such a way that the\nfeature can be conditionally included in the generated build output and enabled\n(or completely removed) based on whether a particular flag is present. This\nallows newly developed features to be selectively released when they are\nconsidered ready for production use.</p>","link":"./v1.10.0/configuring-ember/feature-flags.html","spaLink":"#/v1.10.0/configuring-ember/feature-flags","title":"ABOUT FEATURES"},{"content":"<h2 id=\"-feature-life-cycle\">Feature Life-Cycle</h2><p>When a new feature is flagged it is only available in canary builds (if enabled\nat runtime). When it is time for the next beta cycle to be started (generally\n6-12 week cycles) each feature will be evaluated and those features that are\nready will be enabled in the next <code>beta</code> (and subsequently automatically enabled\nin all future canary builds).</p><p>If a given feature is deemed unstable it will be disabled in the next beta point\nrelease, and not be included in the next stable release. It may still be included\nin the next beta cycle if the issues/concerns have been resolved.</p><p>Once the beta cycle has completed the final release will include any features that\nwere enabled during that cycle. At this point the feature flags will be removed from\nthe canary and future beta branches, and the feature flag will no longer be used.</p>","link":"./v1.10.0/configuring-ember/feature-flags.html","spaLink":"#/v1.10.0/configuring-ember/feature-flags","title":"FEATURE LIFE-CYCLE"},{"content":"<h2 id=\"-flagging-details\">Flagging Details</h2><p>The flag status in the generated build output is controlled by the <code>features.json</code>\nfile in the root of the project. This file lists all features and their current\nstatus.</p><p>A feature can have one of a few different statuses:</p><ul>\n<li><code>true</code> - The feature is <strong>enabled</strong>: the code behind the flag is always enabled in\nthe generated build.</li>\n<li><code>false</code> - The feature is <strong>disabled</strong>: the code behind the flag is not present in\nthe generated build at all.</li>\n<li><code>null</code> - The feature is <strong>present</strong> in the build output, but must be enabled at\nruntime (it is still behind feature flags).</li>\n</ul><p>The process of removing the feature flags from the resulting build output is\nhandled by <code>defeatureify</code>.</p>","link":"./v1.10.0/configuring-ember/feature-flags.html","spaLink":"#/v1.10.0/configuring-ember/feature-flags","title":"FLAGGING DETAILS"},{"content":"<h2 id=\"-feature-listing-featuresmd\">Feature Listing (<a href=\"https://github.com/emberjs/ember.js/blob/master/FEATURES.md\"><code>FEATURES.md</code></a>)</h2><p>When a new feature is added to the <code>canary</code> channel (aka <code>master</code> branch), an\nentry is added to <a href=\"https://github.com/emberjs/ember.js/blob/master/FEATURES.md\"><code>FEATURES.md</code></a>\nexplaining what the feature does (and linking the originating pull request).\nThis listing is kept current, and reflects what is available in each branch\n(<code>stable</code>,<code>beta</code>, and <code>master</code>).</p>","link":"./v1.10.0/configuring-ember/feature-flags.html","spaLink":"#/v1.10.0/configuring-ember/feature-flags","title":"FEATURE LISTING (FEATURES.MD)"},{"content":"<h2 id=\"-enabling-at-runtime\">Enabling At Runtime</h2><p>The only time a feature can be enabled at runtime is if the\n<code>features.json</code> for that build contains <code>null</code> (technically, anything other\nthan <code>true</code> or <code>false</code> will do, but <code>null</code> is the chosen value).</p><p>A global <code>EmberENV</code> object will be used to initialize the <code>Ember.ENV</code>\nobject, and any feature flags that are enabled/disabled under\n<code>EmberENV.FEATURES</code> will be migrated to <code>Ember.FEATURES</code>; those features\nwill be enabled based on the flag value. <strong>Ember only reads</strong> the\n<code>EmberENV</code> value upon initial load so setting this value after Ember has\nbeen loaded will have no affect.</p><p>Example:</p><p>Additionally you can define <code>EmberENV.ENABLE_ALL_FEATURES</code> to force all\nfeatures to be enabled.</p>","link":"./v1.10.0/configuring-ember/feature-flags.html","spaLink":"#/v1.10.0/configuring-ember/feature-flags","title":"ENABLING AT RUNTIME"},{"content":"<h3 id=\"-bug-fixes\">Bug Fixes</h3><p>Urgent bugfixes are bugfixes that need to be applied to the existing\nrelease branch. If possible, they should be made on master and prefixed\nwith [BUGFIX release].</p><p>Beta bugfixes are bugfixes that need to be applied to the beta branch.\nIf possible, they should be made on master and tagged with [BUGFIX\nbeta].</p><p>Security fixes need to be applied to the beta branch, the current\nrelease branch, and the previous tag. If possible, they should be made\non master and tagged with [SECURITY].</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"Bug Fixes"},{"content":"<h3 id=\"-features\">Features</h3><p>Features must always be wrapped in a feature flag. Tests for the feature\nmust also be wrapped in a feature flag.</p><p>Because the build-tools will process feature-flags, flags must use\nprecisely this format. We are choosing conditionals rather than a block\nform because functions change the surrounding scope and may introduce\nproblems with early return.</p><p>Tests will always run with all features on, so make sure that any tests\nfor the feature are passing against the current state of the feature.</p><p>Commits related to a specific feature should include  a prefix like\n[FEATURE htmlbars]. This will allow us to quickly identify all commits\nfor a specific feature in the future. Features will never be applied to\nbeta or release branches. Once a beta or release branch has been cut, it\ncontains all of the new features it will ever have.</p><p>If a feature has made it into beta or release, and you make a commit to\nmaster that fixes a bug in the feature, treat it like a bugfix as\ndescribed above.</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"Features"},{"content":"<h3 id=\"-builds\">Builds</h3><p>The Canary build, which is based off master, will include all features,\nguarded by the conditionals in the original source. This means that\nusers of the canary build can enable whatever features they want by\nenabling them before creating their Ember.Application.</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"Builds"},{"content":"<h3 id=\"-featuresjson\"><code>features.json</code></h3><p>The root of the repository will contain a features.json file, which will\ncontain a list of features that should be enabled for beta or release\nbuilds.</p><p>This file is populated when branching, and may not gain additional\nfeatures after the original branch. It may remove features.</p><p>The build process will remove any features not included in the list, and\nremove the conditionals for features in the list.</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"features.json"},{"content":"<h3 id=\"-travis-testing\">Travis Testing</h3><p>For a new PR:</p><p>For a new commit to master:</p><p>The idea is that new commits should be submitted as PRs to ensure they\napply cleanly, and once the merge button is pressed, Travis will apply\nthem to the right branches.</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"Travis Testing"},{"content":"<h3 id=\"-gono-go-process\">Go/No-Go Process</h3><p>Every six weeks, the core team goes through the following process.</p><p>All remaining features on the beta branch are vetted for readiness. If\nany feature isn’t ready, it is removed from features.json.</p><p>Once this is done, the beta branch is tagged and merged into release.</p><p>All features on the master branch are vetted for readiness. In order for\na feature to be considered “ready” at this stage, it must be ready as-is\nwith no blockers. Features are a no-go even if they are close and\nadditional work on the beta branch would make it ready.</p><p>Because this process happens every six weeks, there will be another\nopportunity for a feature to make it soon enough.</p><p>Once this is done, the master branch is merged into beta. A\n<code>features.json</code> file is added with the features that are ready.</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"Go/No-Go Process"},{"content":"<h3 id=\"-beta-releases\">Beta Releases</h3><p>Every week, we repeat the Go/No-Go process for the features that remain\non the beta branch. Any feature that has become unready is removed from\nthe features.json.</p><p>Once this is done, a Beta release is tagged and pushed.</p>","link":"./v1.10.0/contributing/adding-new-features.html","spaLink":"#/v1.10.0/contributing/adding-new-features","title":"Beta Releases"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You have an idea for a recipe, but aren’t sure it is a good fit for the Cookbook.</p>","link":"./v1.10.0/contributing/deciding_if_a_recipe_is_a_good_fit.html","spaLink":"#/v1.10.0/contributing/deciding_if_a_recipe_is_a_good_fit","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Read existing cookbook solutions and compare them to yours. You may also want to borrow or buy a cookbook-style\nbook for another technology to better understand the format.</p><p>Cookbook recipes are usually quick answers to focused questions. Your recipe should be narrowly tailored to\nsolve a single problem.</p>","link":"./v1.10.0/contributing/deciding_if_a_recipe_is_a_good_fit.html","spaLink":"#/v1.10.0/contributing/deciding_if_a_recipe_is_a_good_fit","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>The Cookbook format best serves beginners who have a basic knowledge of Ember.js and have ideally completed a\nsmall application of their own. Recipes in the Cookbook should teach intermediate and advanced topics, or present\nskills an Ember.js developer should know. Popular topics on StackOverflow are great examples of what a Cookbook\nrecipe should cover.</p><p>A good recipe solves a single problem. Topics like “Syncing data with one-way bindings” or “Integrating Ember with\nmoment.js” make great recipes. Broader topics like “Building an Ember application with Node.js” or “Creating a GridView\nwith sortable fields and search” are not. If your topic is too big, consider breaking it into multiple recipes (e.g.\n“Organizing an Ember application,” “Responding to user events,” “Connecting to remote data”).</p>","link":"./v1.10.0/contributing/deciding_if_a_recipe_is_a_good_fit.html","spaLink":"#/v1.10.0/contributing/deciding_if_a_recipe_is_a_good_fit","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You are familiar with Ember and want to help write the Cookbook.</p>","link":"./v1.10.0/contributing/participating_if_you_know_ember.html","spaLink":"#/v1.10.0/contributing/participating_if_you_know_ember","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Get started by <a href=\"https://github.com/emberjs/website\">forking the repository</a>. Send a pull request with an\nupdate to an existing recipe or a new recipe.</p>","link":"./v1.10.0/contributing/participating_if_you_know_ember.html","spaLink":"#/v1.10.0/contributing/participating_if_you_know_ember","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>Based on your experience and knowledge of Ember, we recommend submitting pull requests with the following:</p><p>You will be able to suggest possible recipes by forking this project and submitting a pull request with a new recipe (see <a href=\"./suggesting_a_recipe\">Suggesting a Recipe</a>).</p>","link":"./v1.10.0/contributing/participating_if_you_know_ember.html","spaLink":"#/v1.10.0/contributing/participating_if_you_know_ember","title":"Discussion"},{"content":"<h1 id=\"main-repositories\">Main Repositories</h1><p><strong>Ember.js</strong> - The main repository for Ember.</p><ul>\n<li><a href=\"https://github.com/emberjs/ember.js\"></a><a href=\"https://github.com/emberjs/ember.js\">https://github.com/emberjs/ember.js</a></li>\n</ul><p><strong>Ember Data</strong> - A data persistence library for Ember.js.</p><ul>\n<li><a href=\"https://github.com/emberjs/data\"></a><a href=\"https://github.com/emberjs/data\">https://github.com/emberjs/data</a></li>\n</ul><p><strong>Ember Website</strong> - Source for <a href=\"http://emberjs.com\"></a><a href=\"http://emberjs.com\">http://emberjs.com</a> including these guides.</p><ul>\n<li><a href=\"https://github.com/emberjs/website\"></a><a href=\"https://github.com/emberjs/website\">https://github.com/emberjs/website</a></li>\n</ul>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"MAIN REPOSITORIES"},{"content":"<h1 id=\"libraries-used-by-ember\">Libraries Used By Ember</h1><p>These libraries are part of the Ember.js source, but development of them takes place in a seperate repository.</p>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"LIBRARIES USED BY EMBER"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-metallibvendorbackburnerjs\"><code>packages/ember-metal/lib/vendor/backburner.js</code></h2><ul>\n<li><strong>backburner.js</strong> - Implements the Ember run loop.</li>\n<li><a href=\"https://github.com/ebryn/backburner.js\"></a><a href=\"https://github.com/ebryn/backburner.js\">https://github.com/ebryn/backburner.js</a></li>\n</ul>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"PACKAGES/EMBER-METAL/LIB/VENDOR/BACKBURNER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-routinglibvendorroute-recognizerjs\"><code>packages/ember-routing/lib/vendor/route-recognizer.js</code></h2><ul>\n<li><strong>route-recognizer.js</strong> - A lightweight JavaScript library that matches paths against registered routes.</li>\n<li><a href=\"https://github.com/tildeio/route-recognizer\"></a><a href=\"https://github.com/tildeio/route-recognizer\">https://github.com/tildeio/route-recognizer</a></li>\n</ul>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"PACKAGES/EMBER-ROUTING/LIB/VENDOR/ROUTE-RECOGNIZER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-routinglibvendorrouterjs\"><code>packages/ember-routing/lib/vendor/router.js</code></h2><ul>\n<li><strong>router.js</strong> - A lightweight JavaScript library that builds on route-recognizer and rsvp to provide an API for handling routes.</li>\n<li><a href=\"https://github.com/tildeio/router.js\"></a><a href=\"https://github.com/tildeio/router.js\">https://github.com/tildeio/router.js</a></li>\n</ul>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"PACKAGES/EMBER-ROUTING/LIB/VENDOR/ROUTER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesmetamorph\"><code>packages/metamorph</code></h2><ul>\n<li><strong>Metamorph.js</strong> - Used by Ember for databinding handlebars templates</li>\n<li><a href=\"https://github.com/tomhuda/metamorph.js\"></a><a href=\"https://github.com/tomhuda/metamorph.js\">https://github.com/tomhuda/metamorph.js</a></li>\n</ul>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"PACKAGES/METAMORPH"},{"content":"<h2 id=\"libraries-used-by-ember-packagesrsvp\"><code>packages/rsvp</code></h2><ul>\n<li><strong>RSVP.js</strong> - Implementation of the of Promises/A+ spec used by Ember.</li>\n<li><a href=\"https://github.com/tildeio/rsvp.js\"></a><a href=\"https://github.com/tildeio/rsvp.js\">https://github.com/tildeio/rsvp.js</a></li>\n</ul>","link":"./v1.10.0/contributing/repositories.html","spaLink":"#/v1.10.0/contributing/repositories","title":"PACKAGES/RSVP"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You are new to Ember, but want to help write the Cookbook.</p>","link":"./v1.10.0/contributing/participating_if_you_dont_know_ember.html","spaLink":"#/v1.10.0/contributing/participating_if_you_dont_know_ember","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Suggest and/or submit pull requests with a <em>problem</em> statement (see <a href=\"./suggesting_a_recipe\">Suggesting A Recipe</a>). You do not need to worry about providing a solution or discussion. Someone more experienced with Ember will be able to take your <em>problem</em> and provide a <em>solution</em> and <em>discussion</em>.</p>","link":"./v1.10.0/contributing/participating_if_you_dont_know_ember.html","spaLink":"#/v1.10.0/contributing/participating_if_you_dont_know_ember","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>The first version of the Ember Cookbook will be completed in a few phases. First, we will be accepting\nrecipe suggestions. You can suggest a recipe by forking this repository and submitting a pull request\n(see <em>Suggesting a Recipe</em>). Once we have written recipes, we’ll be asking for help to proofread and test\nthem.</p><p>See <a href=\"https://help.github.com/articles/be-social#watch-a-project\">“Watch a project”</a> on Github for information on watching projects.</p>","link":"./v1.10.0/contributing/participating_if_you_dont_know_ember.html","spaLink":"#/v1.10.0/contributing/participating_if_you_dont_know_ember","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to contribute, but aren’t familiar with the Cookbook format or don’t know\nhow your contribution should be formatted.</p>","link":"./v1.10.0/contributing/understanding_the_cookbook_format.html","spaLink":"#/v1.10.0/contributing/understanding_the_cookbook_format","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Cookbook-style guides contain recipes that guide a beginning programmer to a deeper knowledge of the subject\nby answering specific, “how-to” style questions. Cookbook recipes address more topics than\n<a href=\"http://emberjs.com/api/classes/Ember.Application.html\">API documentation for a class</a>, but are smaller in\nscope than <a href=\"http://emberjs.com/guides/\">a topic-based guide</a>.</p><p>All recipes follow the same format:</p><p>A Cookbook does not need to be read in any particular order, and each recipe should contain all the information\nnecessary for a beginner to address the <em>problem statement</em>. Referring to other recipes that are considered\nprerequisite knowledge is encouraged.</p>","link":"./v1.10.0/contributing/understanding_the_cookbook_format.html","spaLink":"#/v1.10.0/contributing/understanding_the_cookbook_format","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>Take a look at an <a href=\"http://shop.oreilly.com/category/series/cookbooks.do\">O’Reilly Cookbook</a> or the\n<a href=\"http://coffeescriptcookbook.com/\">Coffeescript Cookbook</a>. Both of these are great examples of the Cookbook\nformat.</p>","link":"./v1.10.0/contributing/understanding_the_cookbook_format.html","spaLink":"#/v1.10.0/contributing/understanding_the_cookbook_format","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You’d like to submit a recipe to the Ember Cookbook.</p>","link":"./v1.10.0/contributing/suggesting_a_recipe.html","spaLink":"#/v1.10.0/contributing/suggesting_a_recipe","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p><a href=\"https://github.com/emberjs/website\">Fork the repository</a> and create a feature branch named after your\nrecipe. New recipes should have four sections: a <em>title</em>, a <em>problem statement</em>, a <em>solution statement</em>, and\nan empty <em>discussion section</em>.</p>","link":"./v1.10.0/contributing/suggesting_a_recipe.html","spaLink":"#/v1.10.0/contributing/suggesting_a_recipe","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>A <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">feature branch</a> is a branch in a local git\nrepository. Its name should be the camel-cased or underscored name of your recipe. For example, the branch\nname for this recipe – “Suggesting a Recipe” – would be <code>SuggestingARecipe</code> or <code>suggesting_a_recipe</code>.</p><p>The <em>title</em>, <em>problem</em>, and <em>solution</em> of your recipe should match the Cookbook’s style (see\n<em>Understanding the Cookbook Format</em>). While your recipe should include a <em>discussion</em> section, you should leave\nit blank. These sections will be created in a later phase of the Cookbook project.</p><p>The filename of your suggested recipe should be the lowercase, underscored version of your recipe’s name. The\nfilename name for this recipe &amp;nash; “Suggesting a Recipe” – would be <code>suggesting_a_recipe.mdown</code>.</p><p>When you are ready to submit your recipe, push your local branch to the remote branch on your Github fork and\nsubmit a pull request. Before submitting a pull request, make sure someone hasn’t already submitted a similar\nrecipe and that your recipe is a good fit for the Cookbook (see <em>Deciding If A Recipe Is A Good Fit</em>).</p>","link":"./v1.10.0/contributing/suggesting_a_recipe.html","spaLink":"#/v1.10.0/contributing/suggesting_a_recipe","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to respond to user-initialed browser events like clicks or key presses.</p>","link":"./v1.10.0/event_handling_and_data_binding/responding_to_user_events.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/responding_to_user_events","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Implement event named based methods on your View classes</p>","link":"./v1.10.0/event_handling_and_data_binding/responding_to_user_events.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/responding_to_user_events","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3>","link":"./v1.10.0/event_handling_and_data_binding/responding_to_user_events.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/responding_to_user_events","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to base the value of one property on the value of another property.</p>","link":"./v1.10.0/event_handling_and_data_binding/binding_properties_of_an_object_to_its_own_properties.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/binding_properties_of_an_object_to_its_own_properties","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Use one of the computed property macros like <code>Ember.computed.alias</code> or <code>Ember.computed.gte</code></p>","link":"./v1.10.0/event_handling_and_data_binding/binding_properties_of_an_object_to_its_own_properties.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/binding_properties_of_an_object_to_its_own_properties","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>Ember.js includes a number of macros that will help create properties whose values are based\non the values of other properties, correctly connecting them with bindings so they remain\nupdated when values change. These all are stored on the <code>Ember.computed</code> object\nand <a href=\"http://emberjs.com/api/#method_computed\">documented in the API documentation</a></p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/AfufoSO/3/edit?output\">JS Bin</a></p>","link":"./v1.10.0/event_handling_and_data_binding/binding_properties_of_an_object_to_its_own_properties.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/binding_properties_of_an_object_to_its_own_properties","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to set the attributes of an HTML element that is created from an Ember.View</p>","link":"./v1.10.0/event_handling_and_data_binding/setting_the_attributes_of_a_views_element.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/setting_the_attributes_of_a_views_element","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Use either the <code>{{bindAttr}}</code> Handlebars helper in your templates or set an attribute binding to a path in your application.</p>","link":"./v1.10.0/event_handling_and_data_binding/setting_the_attributes_of_a_views_element.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/setting_the_attributes_of_a_views_element","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3>","link":"./v1.10.0/event_handling_and_data_binding/setting_the_attributes_of_a_views_element.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/setting_the_attributes_of_a_views_element","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to toggle a boolean property.</p>","link":"./v1.10.0/event_handling_and_data_binding/toggling_a_boolean_property.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/toggling_a_boolean_property","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Use the <code>toggleProperty</code> method of an <code>Ember.Object</code>.</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/IxITIXA/1/embed?live,js,output\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/event_handling_and_data_binding/toggling_a_boolean_property.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/toggling_a_boolean_property","title":"Solution"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want a property on an object whose value is determined programmatically</p>","link":"./v1.10.0/event_handling_and_data_binding/using_computed_properties.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/using_computed_properties","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Create a computer function either with <code>Ember.computed</code> or the <code>property()</code> function of Function objects</p>","link":"./v1.10.0/event_handling_and_data_binding/using_computed_properties.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/using_computed_properties","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3>","link":"./v1.10.0/event_handling_and_data_binding/using_computed_properties.html","spaLink":"#/v1.10.0/event_handling_and_data_binding/using_computed_properties","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to truncate string to a specified length inside your Handlebars templates.</p>","link":"./v1.10.0/helpers_and_components/creating_a_handlebars_helper_to_truncate_text.html","spaLink":"#/v1.10.0/helpers_and_components/creating_a_handlebars_helper_to_truncate_text","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Write a custom Handlebars helper that can truncates text.</p>","link":"./v1.10.0/helpers_and_components/creating_a_handlebars_helper_to_truncate_text.html","spaLink":"#/v1.10.0/helpers_and_components/creating_a_handlebars_helper_to_truncate_text","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>The Handlebars helper is very simple. It takes two parameters: str (string) and len (length).</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/APoDiLA/1/embed?js,output\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/helpers_and_components/creating_a_handlebars_helper_to_truncate_text.html","spaLink":"#/v1.10.0/helpers_and_components/creating_a_handlebars_helper_to_truncate_text","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to create a reusable <a href=\"https://dev.twitter.com/docs/tweet-button\">Tweet button</a>\nfor your application.</p>","link":"./v1.10.0/helpers_and_components/creating_reusable_social_share_buttons.html","spaLink":"#/v1.10.0/helpers_and_components/creating_reusable_social_share_buttons","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Write a custom component that renders the Tweet button with specific attributes\npassed in.</p><p>Include Twitter’s widget code in your HTML:</p>","link":"./v1.10.0/helpers_and_components/creating_reusable_social_share_buttons.html","spaLink":"#/v1.10.0/helpers_and_components/creating_reusable_social_share_buttons","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>Twitter’s widget library expects to find an <code>&lt;a&gt;</code> tag on the page with specific <code>data-</code> attributes applied.\nIt takes the values of these attributes and, when the <code>&lt;a&gt;</code> tag is clicked, opens an iFrame for twitter sharing.</p><p>The <code>share-twitter</code> component takes four options that match the four attributes for the resulting <code>&lt;a&gt;</code> tag:\n<code>data-url</code>, <code>data-text</code>, <code>data-size</code>, <code>data-hashtags</code>. These options and their values become properties on the\ncomponent object. </p><p>The component defines certain attributes of its HTML representation as bound to properties of the object through\nits <code>attributeBindings</code> property. When the values of these properties change, the component’s HTML element’s\nattributes will be updated to match the new values.</p><p>An appropriate tag and css class are applied through the <code>tagName</code> and <code>classNames</code> properties.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/OpocEPu/1/edit?js,output\">JS Bin</a></p>","link":"./v1.10.0/helpers_and_components/creating_reusable_social_share_buttons.html","spaLink":"#/v1.10.0/helpers_and_components/creating_reusable_social_share_buttons","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to add analytics to your Ember application.</p>","link":"./v1.10.0/helpers_and_components/adding_google_analytics_tracking.html","spaLink":"#/v1.10.0/helpers_and_components/adding_google_analytics_tracking","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Subscribe to the <code>didTransition</code> event inside your application router.</p><p>In the following examples we’re using Google Analytics but it could be any other analytics product.\nAdd google analytic’s base code to the html file that renders your ember app.</p><p>Then reopen the application router and add this function. It will be called when\n<code>didTransition</code> is fired by the router.</p>","link":"./v1.10.0/helpers_and_components/adding_google_analytics_tracking.html","spaLink":"#/v1.10.0/helpers_and_components/adding_google_analytics_tracking","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>The <code>didTransition</code> event is responsible for notifying listeners of any URL\nchanges, in this example we are getting the path after the hash in the url so we\ncan notify Google Analytics about moving between areas of the site.</p><p><a href=\"http://jsbin.com/xebevu\">JSBin Example</a></p>","link":"./v1.10.0/helpers_and_components/adding_google_analytics_tracking.html","spaLink":"#/v1.10.0/helpers_and_components/adding_google_analytics_tracking","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You have portions of your views layer that use the same or similar HTML in many places.</p>","link":"./v1.10.0/helpers_and_components/writing_a_custom_handlebars_helper.html","spaLink":"#/v1.10.0/helpers_and_components/writing_a_custom_handlebars_helper","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Write a custom Handlebars helper that can be called from any template and gets updated when the model changes.</p>","link":"./v1.10.0/helpers_and_components/writing_a_custom_handlebars_helper.html","spaLink":"#/v1.10.0/helpers_and_components/writing_a_custom_handlebars_helper","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p><a href=\"http://jsbin.com/IJIKIdi/embed?js,output\">JS Bin</a></p>","link":"./v1.10.0/helpers_and_components/writing_a_custom_handlebars_helper.html","spaLink":"#/v1.10.0/helpers_and_components/writing_a_custom_handlebars_helper","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want a button component that spins to show asynchronous action till completion. Eg- Save Button.</p>","link":"./v1.10.0/helpers_and_components/spin_button_for_asynchronous_actions.html","spaLink":"#/v1.10.0/helpers_and_components/spin_button_for_asynchronous_actions","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Write an Ember Component to change to loading state when action is taking place.</p><p>For example a button to save data could be as</p>","link":"./v1.10.0/helpers_and_components/spin_button_for_asynchronous_actions.html","spaLink":"#/v1.10.0/helpers_and_components/spin_button_for_asynchronous_actions","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>I have dumbed down the sample code to only change text within the button. One may add a loading image inside the button or change the button to a div styled like a button.\nThe component is in charge of setting isLoading = true and the base controller performing asynchronous action decides when the ‘isLoading’ becomes false again.\nFor safety and sanity of the component, one can add a settimeout of however much time and then set ‘isLoading’ back to false so that the components comes to initial state no matter the result of the asynchronous call. But I would prefer it was properly handled in the parent controller.\nAlso note that the component does not let multiple clicks get in the way of loading status.</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://emberjs.jsbin.com/EXaxEfE/14/embed?live\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/helpers_and_components/spin_button_for_asynchronous_actions.html","spaLink":"#/v1.10.0/helpers_and_components/spin_button_for_asynchronous_actions","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to add or remove CSS class names to your Ember Components based on properties of the component.</p>","link":"./v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components_based_on_properties.html","spaLink":"#/v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components_based_on_properties","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Add property names to the <code>classNameBindings</code> property of subclassed components.</p>","link":"./v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components_based_on_properties.html","spaLink":"#/v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components_based_on_properties","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>You can apply classes based on properties of the component, or even by properties bound to data passed into the component. This is done by binding the class attribute using <code>classNameBindings</code>.</p><p>You can also set the class name based on a computed property.</p><p>Another way would be to bind the class name to a bound property.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/AwAYUwe/2/edit?js,output\">JS Bin</a></p><p>See <a href=\"../../components/customizing-a-components-element/\">Customizing a Component’s Element</a> for further examples.</p>","link":"./v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components_based_on_properties.html","spaLink":"#/v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components_based_on_properties","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to add CSS class names to your Ember Components.</p>","link":"./v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components.html","spaLink":"#/v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Set additional class names with the <code>classNames</code> property of subclassed components:</p>","link":"./v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components.html","spaLink":"#/v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>If desired, you can apply multiple class names.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/ifUDExu/2/edit?js,output\">JS Bin</a></p><p>See <a href=\"../../components/customizing-a-components-element/\">Customizing a Component’s Element</a> for further examples.</p>","link":"./v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components.html","spaLink":"#/v1.10.0/user_interface_and_interaction/adding_css_classes_to_your_components","title":"Discussion"},{"content":"<h2 id=\"-problem\">Problem</h2><p>You want to validate your form text fields. The validation should only\napply when the user focused out of the input (so that a blank form won’t\nbe all-red until user focuses each field).</p>","link":"./v1.10.0/user_interface_and_interaction/basic_form_validations.html","spaLink":"#/v1.10.0/user_interface_and_interaction/basic_form_validations","title":"PROBLEM"},{"content":"<h2 id=\"-solution\">Solution</h2><p>Create a new component and define a <code>focusOut</code> hook, which will record\nthat the field has been focused, and add a computed property named\n<code>hasError</code>, which will return validation result only if the field has\nbeen focused. The component expects to get the validation result as the\n<code>valid</code> property.</p><p>And in the template of the component, put an <code>{{input}}</code> and wrap it\ninto a div, which would have the class of <code>has-error</code> bound to\n<code>hasError</code>. </p><p>The use like this:</p>","link":"./v1.10.0/user_interface_and_interaction/basic_form_validations.html","spaLink":"#/v1.10.0/user_interface_and_interaction/basic_form_validations","title":"SOLUTION"},{"content":"<h2 id=\"-discussion\">Discussion</h2><p>Essentially, what we need to achieve is to have a component which wraps\nthe input field with a div that has the <code>has-error</code> class if the\nvalidation fails (after the field has been focused). The validation\nresult is passed to the component through the <code>valid</code> property.</p><p>As there is no way to take existing <code>Ember.TextField</code> component and wrap\nit with a layout (because <code>&lt;input&gt;</code> is a self-closing element, so it has\nno content, and so there is nothing to wrap; and Ember can’t wrap the\nelement itself this way), we are creating a new component,\n<code>ValidatedInputComponent</code>.</p><p>It renders a wrapped input field. The wrapper has the <code>has-error</code> class\nif <code>hasError</code> property of the component is true. It’s true only when\nthe validation fails and the field has been focused at.</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/UpaXeta/3/embed?live\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/user_interface_and_interaction/basic_form_validations.html","spaLink":"#/v1.10.0/user_interface_and_interaction/basic_form_validations","title":"DISCUSSION"},{"content":"<h3 id=\"-problem\">Problem</h3><p>Display JavaScript Date objects in human readable format.</p>","link":"./v1.10.0/user_interface_and_interaction/displaying_formatted_dates_with_moment_js.html","spaLink":"#/v1.10.0/user_interface_and_interaction/displaying_formatted_dates_with_moment_js","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>There are two ways of formatting the value:</p><p>We will use <a href=\"http://momentjs.com\">Moment.js</a> for formatting dates.</p><p>Let’s look at a simple example. You’re working on a website for your\nclient, and one of the requirements is to have the current date on the index page in human readable format. This is a perfect place to use a\nHandlebars helper that “pretty prints” the current date:</p><p>Your template will look like:</p><p>You can even enhance your code and pass in the date format to the helper:</p><p>Now you would need to pass an additional parameter to the helper:</p><p>Let’s look at another example. Say you need\nto create a simple control that allows you to type in a date and\na date format. The date will be formatted accordingly.</p><p>Define <code>formattedDate</code> computed property that depends on\n<code>date</code> and <code>format</code>. Computed property in this example does\nthe same thing as Handlebars helpers defined above.</p>","link":"./v1.10.0/user_interface_and_interaction/displaying_formatted_dates_with_moment_js.html","spaLink":"#/v1.10.0/user_interface_and_interaction/displaying_formatted_dates_with_moment_js","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>Both helper and computed property can format your date value. \nWhich one do I use and when?</p><p>Handlebars helpers are shorthand for cases where you want to format\na value specifically for presentation. That value may be used \nacross different models and controllers.</p><p>You can use <code>{{currentDate}}</code> across your application to format dates\nwithout making any changes to controllers.</p><p>Computed property in the example above does the same thing as the\nHandlebars helper with one big difference:\n<code>formattedDate</code> can be consumed later without applying\ndate format on the date property again.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/iCaGUne/4/edit?output\">JS Bin</a></p>","link":"./v1.10.0/user_interface_and_interaction/displaying_formatted_dates_with_moment_js.html","spaLink":"#/v1.10.0/user_interface_and_interaction/displaying_formatted_dates_with_moment_js","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You’re displaying formatted values in user inputs as currency with\n<a href=\"http://josscrowcroft.github.io/accounting.js/\">Accounting.js</a> and need to remove the decoration to set the\nattributes upstream.</p>","link":"./v1.10.0/user_interface_and_interaction/converting_strings_to_currency_with_accounting_js.html","spaLink":"#/v1.10.0/user_interface_and_interaction/converting_strings_to_currency_with_accounting_js","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Make use of the <a href=\"/guides/object-model/computed-properties/\">computed property’s setter</a> to remove the\ndisplay formatting and set the property to the proper value.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/AqeVuZI/2/embed?live,js,output\">JS Bin</a></p>","link":"./v1.10.0/user_interface_and_interaction/converting_strings_to_currency_with_accounting_js.html","spaLink":"#/v1.10.0/user_interface_and_interaction/converting_strings_to_currency_with_accounting_js","title":"Solution"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You have an Ember.TextField instance that you would like become focused after it’s been inserted.</p>","link":"./v1.10.0/user_interface_and_interaction/focusing_a_textfield_after_its_been_inserted.html","spaLink":"#/v1.10.0/user_interface_and_interaction/focusing_a_textfield_after_its_been_inserted","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Subclass <code>Ember.TextField</code> and define a method marked with\n<code>.on('didInsertElement')</code>. Inside this method apply <code>focus</code>\nto the text field by accessing the components’s jQuery <code>$</code> property:</p><p>For the component’s template:</p>","link":"./v1.10.0/user_interface_and_interaction/focusing_a_textfield_after_its_been_inserted.html","spaLink":"#/v1.10.0/user_interface_and_interaction/focusing_a_textfield_after_its_been_inserted","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>Custom components provide a way to extend native HTML elements with new behavior\nlike autofocusing.</p><p>Our App.FocusInputComponent is an extension of the Ember.TextField component\nwith a <code>becomeFocused</code> method added. After it is added to the DOM, every\ncomponent in Ember.js has access to an underlying jQuery object. This object wraps\nthe component’s element and provides a unified, cross-browser interface for DOM\nmanipulations like triggering focus.</p><p>Because we can only work with these DOM features once an Ember.js component has\nbeen added to the DOM we need to wait for this event to occur. Component’s have a\n<code>didInsertElement</code> event that is triggered when the component has been added to the\nDOM.</p><p>By default Ember.js extends the native <code>Function.prototype</code> object to include a\nnumber of additional functions, the <code>on</code> function among them.  <code>on</code> gives us a declarative\nsyntax for signify that a method should be called when a specific event has fired. In this case,\nwe want to call our new <code>becomeFocused</code> method when the <code>didInsertElement</code> is fired for an instance \nof our component.</p><p>Prototype extension can be disabled by setting the <code>Ember.EXTEND_PROTOTYPES</code> property to false.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/OlUGODo/4/edit?html,js,output\">JS Bin</a></p>","link":"./v1.10.0/user_interface_and_interaction/focusing_a_textfield_after_its_been_inserted.html","spaLink":"#/v1.10.0/user_interface_and_interaction/focusing_a_textfield_after_its_been_inserted","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You have a section of a template that is based on a data but you don’t need the template to update</p>","link":"./v1.10.0/user_interface_and_interaction/specifying_data_driven_areas_of_templates_that_do_not_need_to_update.html","spaLink":"#/v1.10.0/user_interface_and_interaction/specifying_data_driven_areas_of_templates_that_do_not_need_to_update","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Use the <code>{{unbound}}</code> Handlebars helper.</p>","link":"./v1.10.0/user_interface_and_interaction/specifying_data_driven_areas_of_templates_that_do_not_need_to_update.html","spaLink":"#/v1.10.0/user_interface_and_interaction/specifying_data_driven_areas_of_templates_that_do_not_need_to_update","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>By default all uses of Handlebars helpers in Ember.js will use data bound values that will automatically update\nthe section of the template where a property changes after initial rendering.  Ember.Handlebars does this by\napplying the <code>{{bind}}</code> helper automatically for you.</p><p>For example, the two following uses of Handlebars are identical in an Ember.js application:</p><p>If you know that a property accessed in Handlebars will not change for the duration of the application’s\nlife, you can specifiy that the property is not bound by applying the <code>{{unbound}}</code> helper. A property\nthat is not bound will avoid adding unnecessary observers on a property.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/ayUkOWo/3/edit?output\">JS Bin</a></p>","link":"./v1.10.0/user_interface_and_interaction/specifying_data_driven_areas_of_templates_that_do_not_need_to_update.html","spaLink":"#/v1.10.0/user_interface_and_interaction/specifying_data_driven_areas_of_templates_that_do_not_need_to_update","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>The page scroller keeps in the same position when you go from one page to another. For instance, if you scroll down a long list of displayed elements on a page and then you navigate to another page with another long list of elements, you should be able to notice that scroll position is not being reset.</p>","link":"./v1.10.0/user_interface_and_interaction/resetting_scroll_on_route_changes.html","spaLink":"#/v1.10.0/user_interface_and_interaction/resetting_scroll_on_route_changes","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Add the following mixin to the affected Routes:</p><p>Only if you need do something on the <code>activate</code> method you must call <code>this._super()</code> at the beginning:</p><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://emberjs.jsbin.com/kixowati/1/embed?html,js,output\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/user_interface_and_interaction/resetting_scroll_on_route_changes.html","spaLink":"#/v1.10.0/user_interface_and_interaction/resetting_scroll_on_route_changes","title":"Solution"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to show part of your UI in a modal dialog.</p>","link":"./v1.10.0/user_interface_and_interaction/using_modal_dialogs.html","spaLink":"#/v1.10.0/user_interface_and_interaction/using_modal_dialogs","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Render a specific controller into a named <code>modal</code> outlet in your application\ntemplate.</p>","link":"./v1.10.0/user_interface_and_interaction/using_modal_dialogs.html","spaLink":"#/v1.10.0/user_interface_and_interaction/using_modal_dialogs","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>You can use a route’s <code>render</code> method to render a specific controller and\ntemplate into a named outlet. In this case we can setup our application template\nto handle the main outlet and a modal outlet:</p><p>Then you can render a controller and template into the <code>modal</code> outlet.  Sending\nan action in a template will propagate to the application route’s actions.</p><p>In a template:</p><p>In your application route:</p><p>When closing a modal, you can use the route’s <code>disconnectOutlet</code> method to remove\nthe modal from the DOM.</p><p>It may also be helpful to use a <code>modal-dialog</code> component to handle common markup\nand interactions such as rendering an overlay and handling clicks outside of the\nmodal.</p><p>This example shows:</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/peyogo/2/embed?html,js,output\">\n  Recipe: Using a Modal Dialog\n</a></p>","link":"./v1.10.0/user_interface_and_interaction/using_modal_dialogs.html","spaLink":"#/v1.10.0/user_interface_and_interaction/using_modal_dialogs","title":"Discussion"},{"content":"<h2 id=\"-problem\">Problem</h2><p>You’d like to redraw your views every few seconds/minutes e.g. to update\nrelative timestamps (like on twitter.com).</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"PROBLEM"},{"content":"<h2 id=\"-solution\">Solution</h2><p>Have a clock object with a <code>pulse</code> attribute in your application which \nincrements using a timed interval. You want to let view(s) bind values to be\nrefreshed when the <code>pulse</code> attribute increments.</p><p>The clock object can be used to create new instances for binding to new views\ngenerated within the application, like a list of comments.</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"SOLUTION"},{"content":"<h2 id=\"-discussion\">Discussion</h2><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/somosocuni/1/embed?output\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"DISCUSSION"},{"content":"<h3 id=\"-discussion-clockservice-object\">ClockService object</h3><p>This <code>ClockService</code> is an example of an object that may come from a library.\nAnd, is injected into the application via an initializer.</p><p>During initialization the <code>tick</code> method is called which uses <code>Ember.run.later</code>\nwith a time of 250 milliseconds as the interval. A property is set at the end\nof the interval. Since the <code>tick</code> method observes the incremented property\nanother interval is triggered each time the property increases.</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"ClockService object"},{"content":"<h3 id=\"-discussion-binding-to-the-pulse-attribute\">Binding to the <code>pulse</code> attribute</h3><p>In this recipe, an application initializer is used to inject an instance of the\n<code>ClockService</code> object, setting a controller’s <code>clock</code> property to this instance.</p><p>The controller can set any computed properties based on the <code>pulse</code> property of\nthe injected <code>clock</code> instance.</p><p>In this case the <code>seconds</code> property is bound to the <code>pulse</code> property of the\ncontroller’s <code>clock</code>. The property <code>clock.pulse</code> was injected during\ninitialization.</p><p>The controller has (session) data to display <code>seconds</code> to visitors, as well as\na handful of properties used as conditions in the Handlebars template.</p><p>A controller for a list of comments, each comment will have a new clock\ninstance when added to the list. The comment item controller sets up\nthe <code>seconds</code> binding, used by the template to show the time since the\ncomment was created.</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"Binding to the pulse attribute"},{"content":"<h3 id=\"-discussion-handlebars-template-which-displays-the-pulse\">Handlebars template which displays the <code>pulse</code></h3><p>The <code>seconds</code> value is computed from the <code>pulse</code> attribute. And the controller\nhas a few properties to select a component to render, <code>fullSecond</code>,\n<code>quarterSecond</code>, <code>halfSecond</code>, <code>threeQuarterSecond</code>.</p><p>A template for a list of comments</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"Handlebars template which displays the pulse"},{"content":"<h3 id=\"-discussion-handlebars-helper-to-format-the-clock-display-hms\">Handlebars helper to format the clock display (h:m:s)</h3><p>This helper is used in the template like so <code>{{digital-clock seconds}}</code>,\n<code>seconds</code> is the property of the controller that will be displayed (h:m:s).</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"Handlebars helper to format the clock display (h:m:s)"},{"content":"<h3 id=\"-discussion-note\">Note</h3><p>To explore the concept further, try adding a timestamp and updating the clock’s\npulse by comparing the current time. This would be needed to update the pulse\nproperty when a user puts his/her computer to sleep then reopens their browser\nafter waking.</p>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"Note"},{"content":"<h3 id=\"-discussion-links\">Links</h3><p>The source code:</p><ul>\n<li><a href=\"http://jsbin.com/somosocuni/1/edit?html,js,output\">http://jsbin.com/somosocuni/1/edit?html,js,output</a></li>\n</ul><p>Further reading:</p><ul>\n<li><a href=\"http://emberjs.com/api/classes/Ember.Object.html\">Ember Object</a></li>\n<li><a href=\"http://emberjs.com/api/classes/Ember.Application.html#toc_initializers\">Ember Application Initializers</a></li>\n<li><a href=\"http://emberjs.com/api/classes/Ember.Application.html#method_inject\">Method Inject</a></li>\n<li><a href=\"../../templates/conditionals/\">Conditionals</a></li>\n<li><a href=\"../../templates/writing-helpers/\">Writing Helpers</a></li>\n<li><a href=\"../../components/defining-a-component/\">Defining a Component</a></li>\n<li><a href=\"http://emberjs.com/api/classes/Ember.ArrayController.html\">Ember Array Controller</a></li>\n</ul>","link":"./v1.10.0/working_with_objects/continuous_redrawing_of_views.html","spaLink":"#/v1.10.0/working_with_objects/continuous_redrawing_of_views","title":"Links"},{"content":"<h2 id=\"-problem\">Problem</h2><p>You want to display an Ember content array from an ArrayController in descending order instead of ascending order (the default).</p>","link":"./v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order.html","spaLink":"#/v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order","title":"PROBLEM"},{"content":"<h2 id=\"-solution\">Solution</h2>","link":"./v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order.html","spaLink":"#/v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order","title":"SOLUTION"},{"content":"<h2 id=\"-discussion\">Discussion</h2><p>One way to achieve that is to extend <code>Ember.ArrayController</code> with a new function called <code>reverse</code>.\nYou will also have to create a computed property:</p><p>Once you do that, you will be able to use <code>reversedArray</code> property in your Handlebars template: <code>{{#each reversedArray}}{{/each}}</code>.</p><p>Another way to do it is to leverage out of the box EmberJs functionality and to use <code>sortProperties</code> and <code>sortAscending</code> properties.\nJust specify them on your controller, like so:</p><p>And in your template you will be able to consume a reversed array, like this: <code>{{#each arrangedContent}}{{/each}}</code>.</p>","link":"./v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order.html","spaLink":"#/v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order","title":"DISCUSSION"},{"content":"<h3 id=\"-discussion-example\">Example</h3><p><iframe class=\"\" id=\"\" style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(170, 170, 170); border-right-color: rgb(170, 170, 170); border-bottom-color: rgb(170, 170, 170); border-left-color: rgb(170, 170, 170); width: 100%; min-height: 300px; \" data-url=\"http://jsbin.com/opid/3/embed?html,js,output\" src=\"https://jsbin.com/embed-holding\"></iframe><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>","link":"./v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order.html","spaLink":"#/v1.10.0/working_with_objects/displaying_content_arrays_in_reverse_order","title":"Example"},{"content":"<h2 id=\"-problem\">Problem</h2><p>You want to access a particular child view by name from its parent view.</p>","link":"./v1.10.0/working_with_objects/naming_your_child_views.html","spaLink":"#/v1.10.0/working_with_objects/naming_your_child_views","title":"PROBLEM"},{"content":"<h2 id=\"-solution\">Solution</h2><p>Supply a <code>viewName</code> option to the <code>{{view}}</code> helper inside your template.</p>","link":"./v1.10.0/working_with_objects/naming_your_child_views.html","spaLink":"#/v1.10.0/working_with_objects/naming_your_child_views","title":"SOLUTION"},{"content":"<h2 id=\"-discussion\">Discussion</h2>","link":"./v1.10.0/working_with_objects/naming_your_child_views.html","spaLink":"#/v1.10.0/working_with_objects/naming_your_child_views","title":"DISCUSSION"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to increment or decrement a property.</p>","link":"./v1.10.0/working_with_objects/incrementing_or_decrementing_a_property.html","spaLink":"#/v1.10.0/working_with_objects/incrementing_or_decrementing_a_property","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Use the <code>incrementProperty</code> or <code>decrementProperty</code> methods of <code>Ember.Object</code>.</p><p>To increment:</p><p>To decrement:</p>","link":"./v1.10.0/working_with_objects/incrementing_or_decrementing_a_property.html","spaLink":"#/v1.10.0/working_with_objects/incrementing_or_decrementing_a_property","title":"Solution"},{"content":"<h3 id=\"-discussion\">Discussion</h3><p>You can optionally specify a value to increment or decrement by:</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/aTipaQO/2/edit?js,output\">JS Bin</a></p>","link":"./v1.10.0/working_with_objects/incrementing_or_decrementing_a_property.html","spaLink":"#/v1.10.0/working_with_objects/incrementing_or_decrementing_a_property","title":"Discussion"},{"content":"<h3 id=\"-problem\">Problem</h3><p>You want to set multiple properties on an object with a single method call.</p>","link":"./v1.10.0/working_with_objects/setting_multiple_properties_at_once.html","spaLink":"#/v1.10.0/working_with_objects/setting_multiple_properties_at_once","title":"Problem"},{"content":"<h3 id=\"-solution\">Solution</h3><p>Use the <code>setProperties</code> method of <code>Ember.Object</code>.</p><p><a class=\"jsbin-embed\" href=\"http://emberjs.jsbin.com/uPaPEcO/2/edit?js,output\">JS Bin</a></p>","link":"./v1.10.0/working_with_objects/setting_multiple_properties_at_once.html","spaLink":"#/v1.10.0/working_with_objects/setting_multiple_properties_at_once","title":"Solution"},{"content":"<h2 id=\"-addons\">Addons</h2><p>Ember Addons are installed using NPM (eg. <code>npm install --save-dev ember-cli-sass</code>). Addons\nmay bring in other dependencies by modifying your project’s <code>bower.json</code> file\nautomatically.</p><p>You can find listings of addons on <a href=\"http://emberobserver.com\">Ember Observer</a>.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"ADDONS"},{"content":"<h2 id=\"-bower\">Bower</h2><p>Ember CLI uses the <a href=\"http://bower.io\">Bower</a> package manager, making it easy\nto keep your front-end dependencies up to date. The Bower configuration file, <code>bower.json</code>, is located at the root of your Ember\nCLI project, and lists the dependencies for your project. Executing <code>bower install</code>\nwill install all of the dependencies listed in <code>bower.json</code> in one step.</p><p>Ember CLI watches <code>bower.json</code> for changes. Thus it reloads your app if you\ninstall new dependencies via <code>bower install &lt;dependencies&gt; --save</code>.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"BOWER"},{"content":"<h2 id=\"-other-assets\">Other assets</h2><p>Assets not available as an addon or Bower package should be placed in the <code>vendor</code> folder in your project.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"OTHER ASSETS"},{"content":"<h2 id=\"-compiling-assets\">Compiling Assets</h2><p>When you’re using dependencies that are not included in an addon, you will\nhave to instruct Ember CLI to include your assets in the build. This is done using\nthe asset manifest file <code>ember-cli-build.js</code>. You should only try to import assets\nlocated in the <code>bower_components</code> and <code>vendor</code> folders.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"COMPILING ASSETS"},{"content":"<h3 id=\"-compiling-assets-globals-provided-by-javascript-assets\">Globals provided by Javascript assets</h3><p>The globals provided by some assets (like <code>moment</code> in the below example) can be\nused in your application without the need to <code>import</code> them.  Provide the asset\npath as the first and only argument.</p><p>You will need to add <code>\"moment\": true</code> to the <code>predef</code> section in <code>.jshintrc</code> to\nprevent JSHint errors about using an undefined variable.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"Globals provided by Javascript assets"},{"content":"<h3 id=\"-compiling-assets-amd-javascript-modules\">AMD Javascript modules</h3><p>Provide the asset path as the first argument, and the list of modules and exports as the second.</p><p>You can now <code>import</code> them in your app. Eg. <code>import { raw as icAjaxRaw } from 'ic-ajax';</code></p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"AMD Javascript modules"},{"content":"<h3 id=\"-compiling-assets-environment-specific-assets\">Environment Specific Assets</h3><p>If you need to use different assets in different environments, specify an object as the first parameter. That object’s key should be the environment name, and the value should be the asset to use in that environment.</p><p>If you need to import an asset in only one environment you can wrap <code>app.import</code> in an <code>if</code> statement.\nFor assets needed during testing, you should also use the <code>{type: 'test'}</code> option to make sure they\nare available in test mode.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"Environment Specific Assets"},{"content":"<h3 id=\"-compiling-assets-css\">CSS</h3><p>Provide the asset path as the first argument:</p><p>All style assets added this way will be concatenated and output as <code>/assets/vendor.css</code>.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"CSS"},{"content":"<h3 id=\"-compiling-assets-other-assets\">Other Assets</h3><p>All other assets like images or fonts can also be added via <code>import()</code>. By default, they\nwill be copied to <code>dist/</code> as they are.</p><p>This example would create the font file in <code>dist/font-awesome/fonts/fontawesome-webfont.ttf</code>.</p><p>You can also optionally tell <code>import()</code> to place the file at a different path.\nThe following example will copy the file to <code>dist/assets/fontawesome-webfont.ttf</code>.</p><p>If you need to load certain dependencies before others, you can set the <code>prepend</code> property equal to <code>true</code> on the second argument of <code>import()</code>. This will prepend the dependency to the vendor file instead of appending it, which is the default behavior.</p>","link":"./v2.0.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.0.0/addons-and-dependencies/managing-dependencies","title":"Other Assets"},{"content":"<h2 id=\"-application-initializers\">Application Initializers</h2><p>Application initializers can be created with Ember CLI’s <code>initializer</code>\ngenerator:</p><p>Let’s customize the <code>shopping-cart</code> initializer to inject a <code>cart</code> property into\nall the routes in your application:</p>","link":"./v2.0.0/applications/initializers.html","spaLink":"#/v2.0.0/applications/initializers","title":"APPLICATION INITIALIZERS"},{"content":"<h2 id=\"-application-instance-initializers\">Application Instance Initializers</h2><p>Application instance initializers can be created with Ember CLI’s\n<code>instance-initializer</code> generator:</p><p>Let’s add some simple logging to indicate that the instance has booted:</p>","link":"./v2.0.0/applications/initializers.html","spaLink":"#/v2.0.0/applications/initializers","title":"APPLICATION INSTANCE INITIALIZERS"},{"content":"<h2 id=\"-specifying-initializer-order\">Specifying Initializer Order</h2><p>If you’d like to control the order in which initializers run, you can use the\n<code>before</code> and/or <code>after</code> options:</p><p>Note that ordering only applies to initializers of the same type (i.e.\napplication or application instance). Application initializers will always run\nbefore application instance initializers.</p>","link":"./v2.0.0/applications/initializers.html","spaLink":"#/v2.0.0/applications/initializers","title":"SPECIFYING INITIALIZER ORDER"},{"content":"<h2 id=\"-factory-registrations\">Factory Registrations</h2><p>A factory can represent any part of your application, like a <em>route</em>,\n<em>template</em>, or custom class. Every factory is registered with a particular key.\nFor example, the index template is registered with the key <code>template:index</code>, and\nthe application route is registered with the key <code>route:application</code>.</p><p>Registration keys have two segments split by a colon (<code>:</code>). The first segment is\nthe framework factory type, and the second is the name of the particular\nfactory. Hence, the <code>index</code> template has the key <code>template:index</code>. Ember has\nseveral built-in factory types, such as <code>service</code>, <code>route</code>, <code>template</code>, and\n<code>component</code>.</p><p>You can create your own factory type by simply registering a factory with the\nnew type. For example, to create a <code>user</code> type, you’d simply register your\nfactory with <code>application.register('user:user-to-register')</code>.</p><p>Factory registrations must be performed either in application or application\ninstance initializers (with the former being much more common).</p><p>For example, an application initializer could register a <code>Logger</code> factory with\nthe key <code>logger:main</code>:</p>","link":"./v2.0.0/applications/dependency-injection.html","spaLink":"#/v2.0.0/applications/dependency-injection","title":"FACTORY REGISTRATIONS"},{"content":"<h3 id=\"-factory-registrations-registering-already-instantiated-objects\">Registering Already Instantiated Objects</h3><p>By default, Ember will attempt to instantiate a registered factory when it is\nlooked up. When registering an already instantiated object instead of a class,\nuse the <code>instantiate: false</code> option to avoid attempts to re-instantiate it\nduring lookups.</p><p>In the following example, the <code>logger</code> is a plain JavaScript object that should\nbe returned “as is” when it’s looked up:</p>","link":"./v2.0.0/applications/dependency-injection.html","spaLink":"#/v2.0.0/applications/dependency-injection","title":"Registering Already Instantiated Objects"},{"content":"<h3 id=\"-factory-registrations-registering-singletons-vs-non-singletons\">Registering Singletons vs. Non-Singletons</h3><p>By default, registrations are treated as “singletons”. This simply means that\nan instance will be created when it is first looked up, and this same instance\nwill be cached and returned from subsequent lookups.</p><p>When you want fresh objects to be created for every lookup, register your\nfactories as non-singletons using the <code>singleton: false</code> option.</p><p>In the following example, the <code>Message</code> class is registered as a non-singleton:</p>","link":"./v2.0.0/applications/dependency-injection.html","spaLink":"#/v2.0.0/applications/dependency-injection","title":"Registering Singletons vs. Non-Singletons"},{"content":"<h2 id=\"-factory-injections\">Factory Injections</h2><p>Once a factory is registered, it can be “injected” where it is needed.</p><p>Factories can be injected into whole “types” of factories with <em>type\ninjections</em>. For example:</p><p>As a result of this type injection, all factories of the type <code>route</code> will be\ninstantiated with the property <code>logger</code> injected. The value of <code>logger</code> will\ncome from the factory named <code>logger:main</code>.</p><p>Routes in this example application can now access the injected logger:</p><p>Injections can also be made on a specific factory by using its full key:</p><p>In this case, the logger will only be injected on the index route.</p><p>Injections can be made onto any class that requires instantiation. This includes\nall of Ember’s major framework classes, such as components, helpers, routes, and\nthe router.</p>","link":"./v2.0.0/applications/dependency-injection.html","spaLink":"#/v2.0.0/applications/dependency-injection","title":"FACTORY INJECTIONS"},{"content":"<h3 id=\"-factory-injections-ad-hoc-injections\">Ad Hoc Injections</h3><p>Dependency injections can also be declared directly on Ember classes using\n<code>Ember.inject</code>. Currently, <code>Ember.inject</code> supports injecting controllers (via\n<code>Ember.inject.controller</code>) and services (via <code>Ember.inject.service</code>).</p><p>The following code injects the <code>shopping-cart</code> service on the <code>cart-contents</code>\ncomponent as the property <code>cart</code>:</p><p>If you’d like to inject a service with the same name as the property, simply\nleave off the service name (the dasherized version of the name will be used):</p>","link":"./v2.0.0/applications/dependency-injection.html","spaLink":"#/v2.0.0/applications/dependency-injection","title":"Ad Hoc Injections"},{"content":"<h2 id=\"-factory-lookups\">Factory Lookups</h2><p>The vast majority of Ember registrations and lookups are performed implicitly.</p><p>In the rare cases in which you want to perform an explicit lookup of a\nregistered factory, you can do so on an application instance in its associated\ninstance initializer. For example:</p>","link":"./v2.0.0/applications/dependency-injection.html","spaLink":"#/v2.0.0/applications/dependency-injection","title":"FACTORY LOOKUPS"},{"content":"<h3 id=\"-defining-services\">Defining Services</h3><p>Services can be generated using Ember CLI’s <code>service</code> generator. For example,\nthe following command will create the <code>ShoppingCart</code> service:</p><p>Services must extend the <code>Ember.Service</code> base class:</p><p>Like any Ember object, a service is initialized and can have properties and\nmethods of its own.</p>","link":"./v2.0.0/applications/services.html","spaLink":"#/v2.0.0/applications/services","title":"Defining Services"},{"content":"<h3 id=\"-accessing-services\">Accessing Services</h3><p>To access a service, inject it either in an initializer or with <code>Ember.inject</code>:</p><p>This injects the shopping cart service into the component and makes it available\nas the <code>cart</code> property.</p><p>You can then access properties and methods on the service:</p><p>The injected property is lazy; the service will not be instantiated until the\nproperty is explicitly called. It will then persist until the application exits.</p><p>If no argument is provided to <code>service()</code>, Ember will use the dasherized version\nof the property name:</p><p>This also injects the shopping cart service, as the <code>shoppingCart</code> property.</p>","link":"./v2.0.0/applications/services.html","spaLink":"#/v2.0.0/applications/services","title":"Accessing Services"},{"content":"<h2 id=\"-why-is-the-run-loop-useful\">Why is the run loop useful?</h2><p>Very often, batching similar work has benefits. Web browsers do something quite similar\nby batching changes to the DOM.</p><p>Consider the following HTML snippet:</p><p>and executing the following code:</p><p>In this example, the sequence of code forced the browser to recalculate style,\nand relayout after each step. However, if we were able to batch similar jobs together,\nthe browser would have only needed to recalculate the style and layout once.</p><p>Interestingly, this pattern holds true for many other types of work. Essentially,\nbatching similar work allows for better pipelining, and further optimization.</p><p>Let’s look at a similar example that is optimized in Ember, starting with a <code>User</code> object:</p><p>and a template to display its attributes:</p><p>If we execute the following code without the run loop:</p><p>We see that the browser will rerender the template twice.</p><p>However, if we have the run loop in the above code, the browser will only rerender the template once the attributes have all been set.</p><p>In the above example with the run loop, since the user’s attributes end up at the same values as before execution, the template will not even rerender!</p><p>It is of course possible to optimize these scenarios on a case-by-case basis,\nbut getting them for free is much nicer. Using the run loop, we can apply these\nclasses of optimizations not only for each scenario, but holistically app-wide.</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"WHY IS THE RUN LOOP USEFUL?"},{"content":"<h2 id=\"-how-does-the-run-loop-work-in-ember\">How does the Run Loop work in Ember?</h2><p>As mentioned earlier, we schedule work (in the form of function invocations) on\nqueues, and these queues are processed to completion in priority order.</p><p>What are the queues, and what is their priority order?</p><p>Because the priority is first to last, the “sync” queue has higher priority than the “render” or “destroy” queue.</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"HOW DOES THE RUN LOOP WORK IN EMBER?"},{"content":"<h2 id=\"-what-happens-in-these-queues\">What happens in these queues?</h2><ul>\n<li>The <code>sync</code> queue contains binding synchronization jobs</li>\n<li>The <code>actions</code> queue is the general work queue and will typically contain scheduled tasks e.g. promises</li>\n<li>The <code>routerTransitions</code> queue contains transition jobs in the router</li>\n<li>The <code>render</code> queue contains jobs meant for rendering, these will typically update the DOM</li>\n<li>The <code>afterRender</code> queue contains jobs meant to be run after all previously scheduled render tasks are complete. This is often good for 3rd-party DOM manipulation libraries, that should only be run after an entire tree of DOM has been updated</li>\n<li>The <code>destroy</code> queue contains jobs to finish the teardown of objects other jobs have scheduled to destroy</li>\n</ul>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"WHAT HAPPENS IN THESE QUEUES?"},{"content":"<h2 id=\"-in-what-order-are-jobs-executed-on-the-queues\">In what order are jobs executed on the queues?</h2><p>The algorithm works this way:</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"IN WHAT ORDER ARE JOBS EXECUTED ON THE QUEUES?"},{"content":"<h2 id=\"-an-example-of-the-internals\">An example of the internals</h2><p>Rather than writing the higher level app code that internally invokes the various\nrun loop scheduling functions, we have stripped away the covers, and shown the raw run-loop interactions.</p><p>Working with this API directly is not common in most Ember apps, but understanding this example will\nhelp you to understand the run-loops algorithm, which will make you a better Ember developer.</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"AN EXAMPLE OF THE INTERNALS"},{"content":"<h2 id=\"-how-do-i-tell-ember-to-start-a-run-loop\">How do I tell Ember to start a run loop?</h2><p>You should begin a run loop when the callback fires.</p><p>The <code>Ember.run</code> method can be used to create a runloop. In this example, jQuery\nand <code>Ember.run</code> are used to handle a click event and run some Ember code.</p><p>This example uses the <code>=&gt;</code> function syntax, which is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">new ES2015 syntax for\ncallback functions</a> that provides a lexical <code>this</code>. If this syntax is new,\nthink of it as a function that has the same <code>this</code> as the context it is\ndefined in.</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"HOW DO I TELL EMBER TO START A RUN LOOP?"},{"content":"<h2 id=\"-what-happens-if-i-forget-to-start-a-run-loop-in-an-async-handler\">What happens if I forget to start a run loop in an async handler?</h2><p>As mentioned above, you should wrap any non-Ember async callbacks in\n<code>Ember.run</code>. If you don’t, Ember will try to approximate a beginning and end for you.\nConsider the following callback:</p><p>The runloop API calls that <em>schedule</em> work i.e. <code>run.schedule</code>,\n<code>run.scheduleOnce</code>, <code>run.once</code> have the property that they will approximate a\nrunloop for you if one does not already exist. These automatically created\nrunloops we call <em>autoruns</em>.</p><p>Here is some pseudocode to describe what happens using the example above:</p><p>Although autoruns are convenient, they are suboptimal. The current JS frame is\nallowed to end before the run loop is flushed, which sometimes means the browser\nwill take the opportunity to do other things, like garbage collection. GC\nrunning in between data changing and DOM rerendering can cause visual lag and\nshould be minimized.</p><p>Relying on autoruns is not a rigorous or efficient way to use the runloop.\nWrapping event handlers manually is preferred.</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"WHAT HAPPENS IF I FORGET TO START A RUN LOOP IN AN ASYNC HANDLER?"},{"content":"<h2 id=\"-how-is-runloop-behaviour-different-when-testing\">How is runloop behaviour different when testing?</h2><p>When your application is in <em>testing mode</em> then\nEmber will throw an error if you try to schedule work without an available\nrunloop.</p><p>Autoruns are disabled in testing for several reasons:</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"HOW IS RUNLOOP BEHAVIOUR DIFFERENT WHEN TESTING?"},{"content":"<h2 id=\"-where-can-i-find-more-information\">Where can I find more information?</h2><p>Check out the <a href=\"http://emberjs.com/api/classes/Ember.run.html\">Ember.run</a> API\ndocumentation, as well as the <a href=\"https://github.com/ebryn/backburner.js/\">Backburner library</a>\nthat powers the run loop.</p>","link":"./v2.0.0/applications/run-loop.html","spaLink":"#/v2.0.0/applications/run-loop","title":"WHERE CAN I FIND MORE INFORMATION?"},{"content":"<h2 id=\"-defining-a-component-subclass\">Defining a Component Subclass</h2><p>Often times, your components will just encapsulate certain snippets of\nHandlebars templates that you find yourself using over and over. In\nthose cases, you do not need to write any JavaScript at all. Just define\nthe Handlebars template as described above and use the component that is\ncreated.</p><p>If you need to customize the behavior of the component you’ll\nneed to define a subclass of <code>Ember.Component</code>. For example, you would\nneed a custom subclass if you wanted to change a component’s element,\nrespond to actions from the component’s template, or manually make\nchanges to the component’s element using JavaScript.</p><p>Ember knows which subclass powers a component based on its filename. For\nexample, if you have a component called <code>blog-post</code>, you would create a\nfile at <code>app/components/blog-post.js</code>. If your component was called\n<code>audio-player-controls</code>, the file name would be at\n<code>app/components/audio-player-controls.js</code>.</p>","link":"./v2.0.0/components/defining-a-component.html","spaLink":"#/v2.0.0/components/defining-a-component","title":"DEFINING A COMPONENT SUBCLASS"},{"content":"<h2 id=\"-dynamically-rendering-a-component\">Dynamically rendering a component</h2><p>The <code>{{component}}</code> helper can be used to defer the selection of a component to\nrun time. The <code>{{my-component}}</code> syntax always renders the same component,\nwhile using the <code>{{component}}</code> helper allows choosing a component to render on\nthe fly. This is useful in cases where you want to interact with different\nexternal libraries depending on the data. Using the <code>{{component}}</code> helper would\nallow you to keep different logic well-separated.</p><p>The first parameter of the helper is the name of a component to render, as a\nstring. So <code>{{component 'blog-post'}}</code> is just the same as using <code>{{blog-post}}</code>.</p><p>The real value of <code>{{component}}</code> comes from being able to dynamically pick\nthe component being rendered. Below is an example of using the helper as a\nmeans of choosing different components for displaying different kinds of posts:</p><p>When the parameter passed to <code>{{component}}</code> evaluates to <code>null</code> or <code>undefined</code>,\nthe helper renders nothing. When the parameter changes, the currently rendered\ncomponent is destroyed and the new component is created and brought in.</p><p>Picking different components to render in response to the data allows you to\nhave different template and behavior for each case. The <code>{{component}}</code> helper\nis a powerful tool for improving code modularity.</p>","link":"./v2.0.0/components/defining-a-component.html","spaLink":"#/v2.0.0/components/defining-a-component","title":"DYNAMICALLY RENDERING A COMPONENT"},{"content":"<h3 id=\"-customizing-the-element\">Customizing the Element</h3><p>To use a tag other than <code>div</code>, subclass <code>Ember.Component</code> and assign it\na <code>tagName</code> property. This property can be any valid HTML5 tag name as a\nstring.</p>","link":"./v2.0.0/components/customizing-a-components-element.html","spaLink":"#/v2.0.0/components/customizing-a-components-element","title":"Customizing the Element"},{"content":"<h3 id=\"-customizing-class-names\">Customizing Class Names</h3><p>You can also specify which class names are applied to the component’s\nelement by setting its <code>classNames</code> property to an array of strings:</p><p>If you want class names to be determined by properties of the component,\nyou can use class name bindings. If you bind to a Boolean property, the\nclass name will be added or removed depending on the value:</p><p>This component would render the following:</p><p>If <code>isUrgent</code> is changed to <code>false</code>, then the <code>is-urgent</code> class name will be removed.</p><p>By default, the name of the Boolean property is dasherized. You can customize the class name\napplied by delimiting it with a colon:</p><p>This would render this HTML:</p><p>Besides the custom class name for the value being <code>true</code>, you can also specify a class name which is used when the value is <code>false</code>:</p><p>This would render this HTML:</p><p>You can also specify a class which should only be added when the property is\n<code>false</code> by declaring <code>classNameBindings</code> like this:</p><p>This would render this HTML:</p><p>If the <code>isEnabled</code> property is set to <code>true</code>, no class name is added:</p><p>If the bound property’s value is a string, that value will be added as a class name without\nmodification:</p><p>This would render this HTML:</p>","link":"./v2.0.0/components/customizing-a-components-element.html","spaLink":"#/v2.0.0/components/customizing-a-components-element","title":"Customizing Class Names"},{"content":"<h3 id=\"-customizing-attributes\">Customizing Attributes</h3><p>You can bind attributes to the DOM element that represents a component\nby using <code>attributeBindings</code>:</p><p>You can also bind these attributes to differently named properties:</p>","link":"./v2.0.0/components/customizing-a-components-element.html","spaLink":"#/v2.0.0/components/customizing-a-components-element","title":"Customizing Attributes"},{"content":"<h2 id=\"-sending-actions\">Sending Actions</h2><p>In some cases your component needs to define event handlers, perhaps to support\nvarious draggable behaviors. For example, a component may need to send an <code>id</code>\nwhen it receives a drop event:</p><p>You can define the component’s event handlers to manage the drop event.\nAnd if you need to, you may also stop events from bubbling, by using\n<code>return false;</code>.</p>","link":"./v2.0.0/components/handling-events.html","spaLink":"#/v2.0.0/components/handling-events","title":"SENDING ACTIONS"},{"content":"<h2 id=\"-event-names\">Event Names</h2><p>The event handling examples described above respond to one set of events.\nThe names of the built-in events are listed below. Custom events can be\nregistered by using <a href=\"http://emberjs.com/api/classes/Ember.Application.html#property_customEvents\">Ember.Application.customEvents</a>.</p><p>Touch events:</p><ul>\n<li><code>touchStart</code></li>\n<li><code>touchMove</code></li>\n<li><code>touchEnd</code></li>\n<li><code>touchCancel</code></li>\n</ul><p>Keyboard events</p><ul>\n<li><code>keyDown</code></li>\n<li><code>keyUp</code></li>\n<li><code>keyPress</code></li>\n</ul><p>Mouse events</p><ul>\n<li><code>mouseDown</code></li>\n<li><code>mouseUp</code></li>\n<li><code>contextMenu</code></li>\n<li><code>click</code></li>\n<li><code>doubleClick</code></li>\n<li><code>mouseMove</code></li>\n<li><code>focusIn</code></li>\n<li><code>focusOut</code></li>\n<li><code>mouseEnter</code></li>\n<li><code>mouseLeave</code></li>\n</ul><p>Form events:</p><ul>\n<li><code>submit</code></li>\n<li><code>change</code></li>\n<li><code>focusIn</code></li>\n<li><code>focusOut</code></li>\n<li><code>input</code></li>\n</ul><p>HTML5 drag and drop events:</p><ul>\n<li><code>dragStart</code></li>\n<li><code>drag</code></li>\n<li><code>dragEnter</code></li>\n<li><code>dragLeave</code></li>\n<li><code>dragOver</code></li>\n<li><code>dragEnd</code></li>\n<li><code>drop</code></li>\n</ul>","link":"./v2.0.0/components/handling-events.html","spaLink":"#/v2.0.0/components/handling-events","title":"EVENT NAMES"},{"content":"<h2 id=\"-creating-the-component\">Creating the Component</h2><p>Let’s call our component <code>button-with-confirmation</code>. We can create it by\ntyping:</p><p>We’ll plan to use the component in a template something like this:</p><p>We’ll also want to use the component elsewhere, perhaps like this:</p>","link":"./v2.0.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.0.0/components/triggering-changes-with-actions","title":"CREATING THE COMPONENT"},{"content":"<h2 id=\"-designing-the-action\">Designing the Action</h2><p>When implementing an action on a component, you need to break it down into two steps:</p><p>Let’s take it step by step.</p>","link":"./v2.0.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.0.0/components/triggering-changes-with-actions","title":"DESIGNING THE ACTION"},{"content":"<h2 id=\"-implementing-the-action\">Implementing the Action</h2><p>In the parent component, let’s first define what we want to happen when the\nuser clicks the button and then confirms. In this case, we’ll find the user’s\naccount and delete it.</p><p>First, we’ll define what we want to happen when the user double clicks\nthe button. In this case, we’ll find the user’s account and delete it.</p><p>In Ember, each component can\nhave a property called <code>actions</code>, where you put functions that can be\n<a href=\"../../templates/actions/\">invoked by the user interacting with the component\nitself</a>, or by child components.</p><p>Let’s look at the parent component’s JavaScript file. In this example,\nimagine we have a parent component called <code>user-profile</code> that shows the\nuser’s profile to them.</p><p>We’ll implement an action on the parent component called\n<code>userDidDeleteAccount()</code> that, when called, gets a hypothetical <code>login</code>\n<a href=\"../../applications/services/\">service</a> and calls the service’s\n<code>deleteUser()</code> method.</p><p>Now we’ve implemented our action, but we have not told Ember when we\nwant this action to be triggered, which is the next step.</p>","link":"./v2.0.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.0.0/components/triggering-changes-with-actions","title":"IMPLEMENTING THE ACTION"},{"content":"<h2 id=\"-designing-the-child-component\">Designing the Child Component</h2><p>Next, let’s implement the logic to confirm that the user wants to take\nthe action from the component:</p>","link":"./v2.0.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.0.0/components/triggering-changes-with-actions","title":"DESIGNING THE CHILD COMPONENT"},{"content":"<h2 id=\"-passing-the-action-to-the-component\">Passing the Action to the Component</h2><p>Now we just need to make it so that the <code>onConfirm()</code> event in the\n<code>button-with-confirmation()</code> component triggers the\n<code>userDidDeleteAccount()</code> action in the <code>user-profile</code> component.\nOne important thing to know about actions is that they’re <strong>just\nfunctions</strong> you can call, like any other method on your component.\nSo they can be passed from one component to another like this:</p><p>This snippet says “take the <code>userDidDeleteAccount</code> action from the\nparent and make it available on the child component as\n<code>onConfirm</code>.”</p><p>We can do a similar thing for our <code>send-message</code> component:</p><p>Now, we can use <code>onConfirm</code> in the child component to invoke the action on the\nparent:</p><p><code>this.get('onConfirm')</code> will return the function passed from the parent as the\nvalue of <code>onConfirm</code>, and the following <code>()</code> will invoke the function.</p><p>Like normal attributes, actions can be a property on the component; the\nonly difference is that the property is set to a function that knows how\nto trigger behavior.</p><p>That makes it easy to remember how to add an action to a component. It’s\njust like passing an attribute, but you use the <code>action</code> helper to pass\na function instead.</p><p>Actions in components allow you to\ndecouple an event happening from how it’s handled, leading to modular,\nmore reusable components.</p>","link":"./v2.0.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.0.0/components/triggering-changes-with-actions","title":"PASSING THE ACTION TO THE COMPONENT"},{"content":"<h2 id=\"-positional-params\">Positional Params</h2><p>In addition to passing parameters in by name, you can pass them in by position.\nIn other words, you can invoke the above component example like this:</p><p>To set the component up to receive parameters this way, you need\nset the <code>positionalParams</code> attribute in your component class.</p><p>Then you can use the attributes in the component exactly as if they had been\npassed in like <code>{{blog-post title=post.title body=post.body}}</code>.</p><p>Notice that the <code>positionalParams</code> property is added to the class as a\nstatic variable via <code>reopenClass</code>. Positional params are always declared on\nthe component class and cannot be changed while an application runs.</p><p>Alternatively, you can accept have an arbitrary number of parameters by\nsetting <code>positionalParams</code> to a string, e.g. <code>positionalParams: 'params'</code>. This\nwill allow you to access those params as an array like so:</p>","link":"./v2.0.0/components/passing-properties-to-a-component.html","spaLink":"#/v2.0.0/components/passing-properties-to-a-component","title":"POSITIONAL PARAMS"},{"content":"<h2 id=\"-life-without-prototype-extension\">Life Without Prototype Extension</h2><p>In order for your application to behave correctly, you will need to\nmanually extend or create the objects that the native objects were\ncreating before.</p>","link":"./v2.0.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.0.0/configuring-ember/disabling-prototype-extensions","title":"LIFE WITHOUT PROTOTYPE EXTENSION"},{"content":"<h3 id=\"-life-without-prototype-extension-arrays\">Arrays</h3><p>Native arrays will no longer implement the functionality needed to\nobserve them. If you disable prototype extension and attempt to use\nnative arrays with things like a template’s <code>{{#each}}</code> helper, Ember.js\nwill have no way to detect changes to the array and the template will\nnot update as the underlying array changes.</p><p>Additionally, if you try to set the model of an\n<code>Ember.ArrayController</code> to a plain native array, it will raise an\nexception since it no longer implements the <code>Ember.Array</code> interface.</p><p>You can manually coerce a native array into an array that implements the\nrequired interfaces using the convenience method <code>Ember.A</code>:</p>","link":"./v2.0.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.0.0/configuring-ember/disabling-prototype-extensions","title":"Arrays"},{"content":"<h3 id=\"-life-without-prototype-extension-strings\">Strings</h3><p>Strings will no longer have the convenience methods described in the\n<a href=\"http://emberjs.com/api/classes/Ember.String.html\">Ember.String API reference.</a>. Instead,\nyou can use the similarly-named methods of the <code>Ember.String</code> object and\npass the string to use as the first parameter:</p>","link":"./v2.0.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.0.0/configuring-ember/disabling-prototype-extensions","title":"Strings"},{"content":"<h3 id=\"-life-without-prototype-extension-functions\">Functions</h3><p>The <a href=\"../../object-model/\">Object Model</a> section of the Guides describes\nhow to write computed properties, observers, and bindings without\nprototype extensions. Below you can learn about how to convert existing\ncode to the format now encouraged.</p><p>To annotate computed properties, use the <code>Ember.computed()</code> method to\nwrap the function:</p><p>Observers are annotated using <code>Ember.observer()</code>:</p><p>Evented functions are annotated using <code>Ember.on()</code>:</p>","link":"./v2.0.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.0.0/configuring-ember/disabling-prototype-extensions","title":"Functions"},{"content":"<h3 id=\"-changing-the-root-element\">Changing the Root Element</h3><p>By default, your application will render the <a href=\"../../templates/the-application-template\">application template</a>\nand attach it to the document’s <code>body</code> element.</p><p>You can tell the application to append the application template to a\ndifferent element by specifying its <code>rootElement</code> property:</p><p>This property can be specified as either an element or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector\nstring</a>.</p>","link":"./v2.0.0/configuring-ember/embedding-applications.html","spaLink":"#/v2.0.0/configuring-ember/embedding-applications","title":"Changing the Root Element"},{"content":"<h3 id=\"-disabling-url-management\">Disabling URL Management</h3><p>You can prevent Ember from making changes to the URL by <a href=\"../../routing/specifying-the-location-api\">changing the\nrouter’s <code>location</code></a> to\n<code>none</code>:</p>","link":"./v2.0.0/configuring-ember/embedding-applications.html","spaLink":"#/v2.0.0/configuring-ember/embedding-applications","title":"Disabling URL Management"},{"content":"<h3 id=\"-specifying-a-root-url\">Specifying a Root URL</h3><p>If your Ember application is one of multiple web applications served from the same domain, it may be necessary to indicate to the router what the root URL for your Ember application is. By default, Ember will assume it is served from the root of your domain.</p><p>For example, if you wanted to serve your blogging application from <code>http://emberjs.com/blog/</code>, it would be necessary to specify a root URL of <code>/blog/</code>.</p><p>This can be achieved by setting the <code>rootURL</code> on the router:</p>","link":"./v2.0.0/configuring-ember/embedding-applications.html","spaLink":"#/v2.0.0/configuring-ember/embedding-applications","title":"Specifying a Root URL"},{"content":"<h2 id=\"-routing\">Routing</h2>","link":"./v2.0.0/configuring-ember/debugging.html","spaLink":"#/v2.0.0/configuring-ember/debugging","title":"ROUTING"},{"content":"<h2 id=\"-views-templates\">Views / Templates</h2>","link":"./v2.0.0/configuring-ember/debugging.html","spaLink":"#/v2.0.0/configuring-ember/debugging","title":"VIEWS / TEMPLATES"},{"content":"<h2 id=\"-controllers\">Controllers</h2>","link":"./v2.0.0/configuring-ember/debugging.html","spaLink":"#/v2.0.0/configuring-ember/debugging","title":"CONTROLLERS"},{"content":"<h2 id=\"-observers-binding\">Observers / Binding</h2>","link":"./v2.0.0/configuring-ember/debugging.html","spaLink":"#/v2.0.0/configuring-ember/debugging","title":"OBSERVERS / BINDING"},{"content":"<h2 id=\"-miscellaneous\">Miscellaneous</h2><p>This option logs all the lookups that are done to the console. Custom objects\nyou’ve created yourself have a tick, and Ember generated ones don’t.</p><p>It’s useful for understanding which objects Ember is finding when it does a lookup\nand which it is generating automatically for you.</p><p>If you are using imports with Ember, be sure to import the console:</p><p>There are times when dealing with promises that it seems like any errors\nare being ‘swallowed’, and not properly raised. This makes it extremely\ndifficult to track down where a given issue is coming from. Thankfully,\n<code>RSVP</code> has a solution for this problem built in.</p><p>You can provide an <code>onerror</code> function that will be called with the error\ndetails if any errors occur within your promise. This function can be anything\nbut a common practice is to call <code>console.assert</code> to dump the error to the\nconsole.</p><p>Backburner has support for stitching the stacktraces together so that you can\ntrack down where an erroring <code>Ember.run.later</code> is being initiated from. Unfortunately,\nthis is quite slow and is not appropriate for production or even normal development.</p><p>To enable this mode you can set:</p>","link":"./v2.0.0/configuring-ember/debugging.html","spaLink":"#/v2.0.0/configuring-ember/debugging","title":"MISCELLANEOUS"},{"content":"<h2 id=\"-feature-life-cycle\">Feature Life-Cycle</h2><p>A newly-flagged feature is only available in canary builds and can be enabled\nat runtime through your project’s configuration file.</p><p>At the start of a beta cycle the Ember core team evaluates each new feature.\nFeatures deemed stable are made available in the next beta and enabled by default.</p><p>Beta features that receive negative feedback from the community are disabled in the next beta point\nrelease, and are not included in the next stable release. They may still be included\nin the next beta cycle if the issues/concerns are resolved.</p><p>Once the beta cycle has completed the next stable release will include any features that\nwere enabled during the beta cycle. At this point the feature flags will be removed from\nthe canary and future beta branches and the feature becomes of the framework.</p>","link":"./v2.0.0/configuring-ember/feature-flags.html","spaLink":"#/v2.0.0/configuring-ember/feature-flags","title":"FEATURE LIFE-CYCLE"},{"content":"<h2 id=\"-flagging-details\">Flagging Details</h2><p>The flag status in the generated build is controlled by the <code>features.json</code>\nfile in the root of the Ember.js project. This file lists all new features and their current status.</p><p>A feature can have one of a three flags:</p><ul>\n<li><code>true</code> - The feature is <strong>present</strong> and <strong>enabled</strong>: the code behind the flag is always enabled in\nthe generated build.</li>\n<li><code>null</code> - The feature is <strong>present</strong> but <strong>disabled</strong> in the build output. It must be enabled at\nruntime.</li>\n<li><code>false</code> - The feature is entirely <strong>disabled</strong>: the code behind the flag is not present in\nthe generated build.</li>\n</ul><p>The process of removing the feature flags from the resulting build output is\nhandled by <a href=\"https://github.com/thomasboyt/defeatureify\"><code>defeatureify</code></a>.</p>","link":"./v2.0.0/configuring-ember/feature-flags.html","spaLink":"#/v2.0.0/configuring-ember/feature-flags","title":"FLAGGING DETAILS"},{"content":"<h2 id=\"-feature-listing-featuresmd\">Feature Listing (<a href=\"https://github.com/emberjs/ember.js/blob/master/FEATURES.md\"><code>FEATURES.md</code></a>)</h2><p>When a developer adds a new feature <code>canary</code> channel (i.e. the <code>master</code> branch on github), they\nalso add an entry to <a href=\"https://github.com/emberjs/ember.js/blob/master/FEATURES.md\"><code>FEATURES.md</code></a>\nexplaining what the feature does and linking to their originating pull request.\nThis list is kept current, and reflects what is available in each channel\n(<code>stable</code>, <code>beta</code>, and <code>master</code>).</p>","link":"./v2.0.0/configuring-ember/feature-flags.html","spaLink":"#/v2.0.0/configuring-ember/feature-flags","title":"FEATURE LISTING (FEATURES.MD)"},{"content":"<h2 id=\"-enabling-at-runtime\">Enabling At Runtime</h2><p>When using the Ember.js canary or beta builds you can enable any “<strong>present</strong> but <strong>disabled</strong>“\nby setting its flag value to <code>true</code> before your application boots:</p><p>For the truly ambitious developer, setting <code>ENV.EmberENV.ENABLE_ALL_FEATURES</code> to <code>true</code> will enable all\nexperimental features.</p>","link":"./v2.0.0/configuring-ember/feature-flags.html","spaLink":"#/v2.0.0/configuring-ember/feature-flags","title":"ENABLING AT RUNTIME"},{"content":"<h2 id=\"-history\">history</h2><p>When using <code>history</code>, Ember uses the browser’s\n<a href=\"http://caniuse.com/history\">history</a> API to produce URLs with a structure like\n<code>/posts/new</code>.</p><p>Given the following router, entering <code>/posts/new</code> will take you to the <code>posts.new</code>\nroute.</p><p>Keep in mind that your server must serve the Ember app from all the URLs defined in your\n<code>Router.map</code> function. In other words, if your user directly navigates to\n<code>/posts/new</code>, your server must be configured to serve your Ember app in\nresponse.</p>","link":"./v2.0.0/configuring-ember/specifying-url-type.html","spaLink":"#/v2.0.0/configuring-ember/specifying-url-type","title":"HISTORY"},{"content":"<h2 id=\"-hash\">hash</h2><p>The <code>hash</code> option uses the URL’s anchor to load the starting state of your\napplication and will keep it in sync as you move around. At present, this relies\non a <a href=\"http://caniuse.com/hashchange\">hashchange</a> event existing in the browser.</p><p>In the router example above, entering <code>/#/posts/new</code> will take you to the <code>posts.new</code>\nroute.</p>","link":"./v2.0.0/configuring-ember/specifying-url-type.html","spaLink":"#/v2.0.0/configuring-ember/specifying-url-type","title":"HASH"},{"content":"<h2 id=\"-none\">none</h2><p>Finally, if you don’t want the browser’s URL to interact with your application\nat all, you can disable the location API entirely by setting <code>ENV.locationType</code>\nto <code>none</code>. This is useful for\ntesting, or when you don’t want Ember to muck with the URL (for example when you embed your\napplication in a larger page).</p>","link":"./v2.0.0/configuring-ember/specifying-url-type.html","spaLink":"#/v2.0.0/configuring-ember/specifying-url-type","title":"NONE"},{"content":"<h1 id=\"main-repositories\">Main Repositories</h1><p><strong>Ember.js</strong> - The main repository for Ember.</p><ul>\n<li><a href=\"https://github.com/emberjs/ember.js\"></a><a href=\"https://github.com/emberjs/ember.js\">https://github.com/emberjs/ember.js</a></li>\n</ul><p><strong>Ember Data</strong> - A data persistence library for Ember.js.</p><ul>\n<li><a href=\"https://github.com/emberjs/data\"></a><a href=\"https://github.com/emberjs/data\">https://github.com/emberjs/data</a></li>\n</ul><p><strong>Ember Website</strong> - Source for <a href=\"http://emberjs.com\"></a><a href=\"http://emberjs.com\">http://emberjs.com</a></p><ul>\n<li><a href=\"https://github.com/emberjs/website\"></a><a href=\"https://github.com/emberjs/website\">https://github.com/emberjs/website</a></li>\n</ul><p><strong>Ember Guides</strong> - Source for <a href=\"http://guides.emberjs.com\"></a><a href=\"http://guides.emberjs.com\">http://guides.emberjs.com</a> which you are currently reading.</p><ul>\n<li><a href=\"https://github.com/emberjs/guides\"></a><a href=\"https://github.com/emberjs/guides\">https://github.com/emberjs/guides</a></li>\n</ul>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"MAIN REPOSITORIES"},{"content":"<h1 id=\"libraries-used-by-ember\">Libraries Used By Ember</h1><p>These libraries are part of the Ember.js source, but development of them takes place in a separate repository.</p>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"LIBRARIES USED BY EMBER"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-metallibvendorbackburnerjs\"><code>packages/ember-metal/lib/vendor/backburner.js</code></h2><ul>\n<li><strong>backburner.js</strong> - Implements the Ember run loop.</li>\n<li><a href=\"https://github.com/ebryn/backburner.js\"></a><a href=\"https://github.com/ebryn/backburner.js\">https://github.com/ebryn/backburner.js</a></li>\n</ul>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"PACKAGES/EMBER-METAL/LIB/VENDOR/BACKBURNER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-routinglibvendorroute-recognizerjs\"><code>packages/ember-routing/lib/vendor/route-recognizer.js</code></h2><ul>\n<li><strong>route-recognizer.js</strong> - A lightweight JavaScript library that matches paths against registered routes.</li>\n<li><a href=\"https://github.com/tildeio/route-recognizer\"></a><a href=\"https://github.com/tildeio/route-recognizer\">https://github.com/tildeio/route-recognizer</a></li>\n</ul>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"PACKAGES/EMBER-ROUTING/LIB/VENDOR/ROUTE-RECOGNIZER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-routinglibvendorrouterjs\"><code>packages/ember-routing/lib/vendor/router.js</code></h2><ul>\n<li><strong>router.js</strong> - A lightweight JavaScript library that builds on route-recognizer and rsvp to provide an API for handling routes.</li>\n<li><a href=\"https://github.com/tildeio/router.js\"></a><a href=\"https://github.com/tildeio/router.js\">https://github.com/tildeio/router.js</a></li>\n</ul>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"PACKAGES/EMBER-ROUTING/LIB/VENDOR/ROUTER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesmetamorph\"><code>packages/metamorph</code></h2><ul>\n<li><strong>Metamorph.js</strong> - Used by Ember for databinding handlebars templates</li>\n<li><a href=\"https://github.com/tomhuda/metamorph.js\"></a><a href=\"https://github.com/tomhuda/metamorph.js\">https://github.com/tomhuda/metamorph.js</a></li>\n</ul>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"PACKAGES/METAMORPH"},{"content":"<h2 id=\"libraries-used-by-ember-packagesrsvp\"><code>packages/rsvp</code></h2><ul>\n<li><strong>RSVP.js</strong> - Implementation of the of Promises/A+ spec used by Ember.</li>\n<li><a href=\"https://github.com/tildeio/rsvp.js\"></a><a href=\"https://github.com/tildeio/rsvp.js\">https://github.com/tildeio/rsvp.js</a></li>\n</ul>","link":"./v2.0.0/contributing/repositories.html","spaLink":"#/v2.0.0/contributing/repositories","title":"PACKAGES/RSVP"},{"content":"<h3 id=\"-bug-fixes\">Bug Fixes</h3><p>Urgent bugfixes are bugfixes that need to be applied to the existing\nrelease branch. If possible, they should be made on master and prefixed\nwith [BUGFIX release].</p><p>Beta bugfixes are bugfixes that need to be applied to the beta branch.\nIf possible, they should be made on master and tagged with [BUGFIX\nbeta].</p><p>Security fixes need to be applied to the beta branch, the current\nrelease branch, and the previous tag. If possible, they should be made\non master and tagged with [SECURITY].</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"Bug Fixes"},{"content":"<h3 id=\"-features\">Features</h3><p>Features must always be wrapped in a feature flag. Tests for the feature\nmust also be wrapped in a feature flag.</p><p>Because the build-tools will process feature-flags, flags must use\nprecisely this format. We are choosing conditionals rather than a block\nform because functions change the surrounding scope and may introduce\nproblems with early return.</p><p>Tests will always run with all features on, so make sure that any tests\nfor the feature are passing against the current state of the feature.</p><p>Commits related to a specific feature should include  a prefix like\n[FEATURE htmlbars]. This will allow us to quickly identify all commits\nfor a specific feature in the future. Features will never be applied to\nbeta or release branches. Once a beta or release branch has been cut, it\ncontains all of the new features it will ever have.</p><p>If a feature has made it into beta or release, and you make a commit to\nmaster that fixes a bug in the feature, treat it like a bugfix as\ndescribed above.</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"Features"},{"content":"<h3 id=\"-builds\">Builds</h3><p>The Canary build, which is based off master, will include all features,\nguarded by the conditionals in the original source. This means that\nusers of the canary build can enable whatever features they want by\nenabling them before creating their Ember.Application.</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"Builds"},{"content":"<h3 id=\"-featuresjson\"><code>features.json</code></h3><p>The root of the repository will contain a features.json file, which will\ncontain a list of features that should be enabled for beta or release\nbuilds.</p><p>This file is populated when branching, and may not gain additional\nfeatures after the original branch. It may remove features.</p><p>The build process will remove any features not included in the list, and\nremove the conditionals for features in the list.</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"features.json"},{"content":"<h3 id=\"-travis-testing\">Travis Testing</h3><p>For a new PR:</p><p>For a new commit to master:</p><p>The idea is that new commits should be submitted as PRs to ensure they\napply cleanly, and once the merge button is pressed, Travis will apply\nthem to the right branches.</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"Travis Testing"},{"content":"<h3 id=\"-gono-go-process\">Go/No-Go Process</h3><p>Every six weeks, the core team goes through the following process.</p><p>All remaining features on the beta branch are vetted for readiness. If\nany feature isn’t ready, it is removed from features.json.</p><p>Once this is done, the beta branch is tagged and merged into release.</p><p>All features on the master branch are vetted for readiness. In order for\na feature to be considered “ready” at this stage, it must be ready as-is\nwith no blockers. Features are a no-go even if they are close and\nadditional work on the beta branch would make it ready.</p><p>Because this process happens every six weeks, there will be another\nopportunity for a feature to make it soon enough.</p><p>Once this is done, the master branch is merged into beta. A\n<code>features.json</code> file is added with the features that are ready.</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"Go/No-Go Process"},{"content":"<h3 id=\"-beta-releases\">Beta Releases</h3><p>Every week, we repeat the Go/No-Go process for the features that remain\non the beta branch. Any feature that has become unready is removed from\nthe features.json.</p><p>Once this is done, a Beta release is tagged and pushed.</p>","link":"./v2.0.0/contributing/adding-new-features.html","spaLink":"#/v2.0.0/contributing/adding-new-features","title":"Beta Releases"},{"content":"<h3 id=\"-inspecting-records\">Inspecting Records</h3><p>Each row in the list corresponds to one record. The first four model attributes are shown in the list view. Clicking on the record will open the Object Inspector for that record, and display all attributes.</p><p><img src=\"../../images/guides/ember-inspector/data-object-inspector.png\" width=\"680\"></p>","link":"./v2.0.0/ember-inspector/data.html","spaLink":"#/v2.0.0/ember-inspector/data","title":"Inspecting Records"},{"content":"<h3 id=\"-record-states-and-filtering\">Record States and Filtering</h3><p>The Data tab is kept in sync with the data loaded in your application.\nAny record additions, deletions, or changes are reflected immediately. If you have unsaved\nrecords, they will be displayed in green by clicking on the New pill.</p><p><img src=\"../../images/guides/ember-inspector/data-new-records.png\" width=\"680\"></p><p>Click on the Modified pill to display unsaved record modifications.</p><p><img src=\"../../images/guides/ember-inspector/data-modified-records.png\" width=\"680\"></p><p>You can also filter records by entering a query in the search box.</p>","link":"./v2.0.0/ember-inspector/data.html","spaLink":"#/v2.0.0/ember-inspector/data","title":"Record States and Filtering"},{"content":"<h3 id=\"-building-a-data-custom-adapter\">Building a Data Custom Adapter</h3><p>You can use your own data persistence library with the Inspector. Build a <a href=\"https://github.com/emberjs/ember.js/blob/3ac2fdb0b7373cbe9f3100bdb9035dd87a849f64/packages/ember-extension-support/lib/data_adapter.js\">data adapter</a>, and you can inspect your models\nusing the Data tab. Use <a href=\"https://github.com/emberjs/data/blob/d7988679590bff63f4d92c4b5ecab173bd624ebb/packages/ember-data/lib/system/debug/debug_adapter.js\">Ember Data’s data adapter</a> as an example for how to build your data adapter.</p>","link":"./v2.0.0/ember-inspector/data.html","spaLink":"#/v2.0.0/ember-inspector/data","title":"Building a Data Custom Adapter"},{"content":"<h3 id=\"-inspecting-instances\">Inspecting Instances</h3><p>Click on a row to inspect a given instance using the Object Inspector.</p><p><img src=\"../../images/guides/ember-inspector/container-object-inspector.png\" width=\"680\"></p>","link":"./v2.0.0/ember-inspector/container.html","spaLink":"#/v2.0.0/ember-inspector/container","title":"Inspecting Instances"},{"content":"<h3 id=\"-filter-and-reload\">Filter and Reload</h3><p>You can reload the container tab by clicking on the reload icon. To search for instances, type a query in the search box.</p><p><img src=\"../../images/guides/ember-inspector/container-toolbar.png\" width=\"300\"></p>","link":"./v2.0.0/ember-inspector/container.html","spaLink":"#/v2.0.0/ember-inspector/container","title":"Filter and Reload"},{"content":"<h3 id=\"-ember-cli-deprecation-sources\">Ember CLI Deprecation Sources</h3><p>If you are using Ember CLI and have source maps enabled, you can see a\nlist of sources for each deprecation. If you are using Chrome or Firefox,\nclicking on the source opens the sources panel and takes you to\nthe code that caused the deprecation message to be displayed.</p><p><img src=\"../../images/guides/ember-inspector/deprecations-source.png\"></p><p><img src=\"../../images/guides/ember-inspector/deprecations-sources-panel.png\" width=\"550\"></p><p>You can send the deprecation message’s stack trace to the\nconsole by clicking on <code>Trace in the console</code>.</p>","link":"./v2.0.0/ember-inspector/deprecations.html","spaLink":"#/v2.0.0/ember-inspector/deprecations","title":"Ember CLI Deprecation Sources"},{"content":"<h3 id=\"-transition-plans\">Transition Plans</h3><p>Click on the “Transition Plan” link for information on how to remove the deprecation warning, and you’ll be taken to a helpful deprecation guide on the Ember website.</p><p><img src=\"../../images/guides/ember-inspector/deprecations-transition-plan.png\" width=\"680\"></p>","link":"./v2.0.0/ember-inspector/deprecations.html","spaLink":"#/v2.0.0/ember-inspector/deprecations","title":"Transition Plans"},{"content":"<h3 id=\"-filtering-and-clearing\">Filtering and Clearing</h3><p>You can filter the deprecations by typing a query in the search box.\nYou can also clear the current deprecations by clicking on the clear icon\nat the top.</p><p><img src=\"../../images/guides/ember-inspector/deprecations-toolbar.png\" width=\"300\"></p>","link":"./v2.0.0/ember-inspector/deprecations.html","spaLink":"#/v2.0.0/ember-inspector/deprecations","title":"Filtering and Clearing"},{"content":"<h3 id=\"-google-chrome\">Google Chrome</h3><p>You can install the Inspector on Google Chrome as a new Developer\nTool. To begin, visit the Extension page on the <a href=\"https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi\">Chrome Web Store</a>.</p><p>Click on “Add To Chrome”:</p><p><img src=\"../../images/guides/ember-inspector/installation-chrome-store.png\" width=\"680\"></p><p>Once installed, go to an Ember application, open the Developer Tools,\nand click on the <code>Ember</code> tab at the far right.</p><p><img src=\"../../images/guides/ember-inspector/installation-chrome-panel.png\" width=\"680\"></p><p>To use the Inspector with the <code>file://</code> protocol, visit <code>chrome://extensions</code> in Chrome and check the “Allow access to file URLs” checkbox:</p><p><img src=\"../../images/guides/ember-inspector/installation-chrome-file-urls.png\" width=\"400\"></p><p>You can configure a Tomster icon to show up in Chrome’s URL bar whenever you are visiting a site that uses Ember.</p><p>Visit <code>chrome://extensions</code>, then click on <code>Options</code>.</p><p><img src=\"../../images/guides/ember-inspector/installation-chrome-tomster.png\" width=\"400\"></p><p>Make sure the “Display the Tomster” checkbox is checked.</p><p><img src=\"../../images/guides/ember-inspector/installation-chrome-tomster-checkbox.png\" width=\"400\"></p>","link":"./v2.0.0/ember-inspector/installation.html","spaLink":"#/v2.0.0/ember-inspector/installation","title":"Google Chrome"},{"content":"<h3 id=\"-firefox\">Firefox</h3><p>Visit the Add-on page on the <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/\">Mozilla Add-ons\nsite</a>.</p><p>Click on “Add to Firefox”.</p><p><img src=\"../../images/guides/ember-inspector/installation-firefox-store.png\" width=\"680\"></p><p>Once installed, go to an Ember application, open the Developer Tools,\nand click on the <code>Ember</code> tab.</p><p><img src=\"../../images/guides/ember-inspector/installation-firefox-panel.png\" width=\"680\"></p><p>To enable the Tomster icon to show up in the URL bar whenever you are\nvisiting a site that uses Ember visit <code>about:addons</code>.</p><p>Click on <code>Extensions</code> -&gt; <code>Preferences</code>.</p><p><img src=\"../../images/guides/ember-inspector/installation-firefox-preferences.png\" width=\"600\"></p><p>Then make sure the “Display the Tomster icon when a site runs Ember.js” checkbox is checked.</p><p><img src=\"../../images/guides/ember-inspector/installation-firefox-tomster-checkbox.png\" width=\"400\"></p>","link":"./v2.0.0/ember-inspector/installation.html","spaLink":"#/v2.0.0/ember-inspector/installation","title":"Firefox"},{"content":"<h3 id=\"-via-bookmarklet\">Via Bookmarklet</h3><p>If you are using a browser other than Chrome or Firefox, you can use the\nbookmarklet option to use the Inspector.</p><p>Add the following bookmark:</p><p><a href=\"javascript: (function() { var s = document.createElement('script'); s.src = '//ember-extension.s3.amazonaws.com/dist_bookmarklet/load_inspector.js'; document.body.appendChild(s); }());\">Bookmark Me</a></p><p>To open the Inspector, just click on the new bookmark. Safari blocks popups by default, so you’ll need to enable popups before using the bookmarklet.</p>","link":"./v2.0.0/ember-inspector/installation.html","spaLink":"#/v2.0.0/ember-inspector/installation","title":"Via Bookmarklet"},{"content":"<h3 id=\"-mobile-devices\">Mobile Devices</h3><p>If you want to run the Inspector on a mobile device,\nyou can use the <a href=\"https://github.com/joostdevries/ember-cli-remote-inspector\">Ember CLI Remote Inspector</a> addon.</p>","link":"./v2.0.0/ember-inspector/installation.html","spaLink":"#/v2.0.0/ember-inspector/installation","title":"Mobile Devices"},{"content":"<h3 id=\"-registering-a-library\">Registering a Library</h3><p>If you would like to add your own application or library to the list, you can register it using:</p><p>If you’re using the <a href=\"https://github.com/embersherpa/ember-cli-app-version\">ember-cli-app-version</a> addon, your application’s name and version will be added to the list automatically.</p>","link":"./v2.0.0/ember-inspector/info.html","spaLink":"#/v2.0.0/ember-inspector/info","title":"Registering a Library"},{"content":"<h3 id=\"-viewing-objects\">Viewing Objects</h3><p>Here’s what you see when you click on an object:</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-controller.png\" width=\"450\"></p><p>The Inspector displays the parent objects and mixins that are composed into the chosen object, including the inherited properties.</p><p>Each property value in this view is bound to your application, so if the value of a \nproperty updates in your app, it will be reflected in the Inspector.</p><p>If a property name is preceded by a calculator icon, that means it is a <a href=\"../../object-model/computed-properties\">computed property</a>. If the value of a computed property hasn’t yet been computed, you can\nclick on the calculator to compute it.</p>","link":"./v2.0.0/ember-inspector/object-inspector.html","spaLink":"#/v2.0.0/ember-inspector/object-inspector","title":"Viewing Objects"},{"content":"<h3 id=\"-exposing-objects-to-the-console\">Exposing Objects to the Console</h3><p>You can expose objects to the console by clicking on the <code>$E</code> button within the Inspector.\nThis will set the global <code>$E</code> variable to the chosen object.</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-$E.png\" width=\"450\"></p><p>You can also expose properties to the console. When you hover over an object’s properties, a <code>$E</code> button will appear\nnext to every property. Click on it to expose the property’s value to the\nconsole.</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-property-$E.png\" width=\"450\"></p><p>You can send Ember objects and arrays to the Inspector by using\n<code>EmberInspector.inspect</code> within the console.</p><p>Make sure the Inspector is active when you call this method.</p>","link":"./v2.0.0/ember-inspector/object-inspector.html","spaLink":"#/v2.0.0/ember-inspector/object-inspector","title":"Exposing Objects to the Console"},{"content":"<h3 id=\"-editing-properties\">Editing Properties</h3><p>You can edit <code>String</code>, <code>Number</code>, and <code>Boolean</code> properties in the Inspector.\nYour changes will be reflected immediately in your app. Click on a property’s value to start editing it.</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-edit.png\" width=\"450\"></p><p>Edit the property and press the <code>ENTER</code> key to commit the change, or <code>ESC</code> to cancel.</p>","link":"./v2.0.0/ember-inspector/object-inspector.html","spaLink":"#/v2.0.0/ember-inspector/object-inspector","title":"Editing Properties"},{"content":"<h3 id=\"-navigating-the-inspector\">Navigating the Inspector</h3><p>In addition to inspecting the properties above, you can inspect properties that hold Ember objects or arrays.\nClick on the property’s value to inspect it.</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-object-property.png\" width=\"450\"></p><p>You can continue drill into the Inspector as long as properties contain either an\nEmber object or an array.\nIn the image below, we clicked on the <code>model</code> property first, then clicked\non the <code>store</code> property.</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-nested-objects.png\" width=\"450\"></p><p>You can see the path to the current object at the top of the\nInspector. You can go back to the previous object by clicking on the\nleft-facing arrow at the top left.</p>","link":"./v2.0.0/ember-inspector/object-inspector.html","spaLink":"#/v2.0.0/ember-inspector/object-inspector","title":"Navigating the Inspector"},{"content":"<h3 id=\"-custom-property-grouping\">Custom Property Grouping</h3><p>Some properties are not only grouped by inheritance, but also\nby framework level semantics. For example, if you inspect an Ember Data\nmodel, you can see <code>Attributes</code>, <code>Belongs To</code>, <code>Has Many</code>, and <code>Flags</code>\ngroups.</p><p><img src=\"../../images/guides/ember-inspector/object-inspector-model.png\" width=\"450\"></p><p>Library authors can customize how any object will display in the Inspector. \nBy defining a <code>_debugInfo</code> method, an object can tell the Inspector how it should be rendered.\nFor an example on how to customize an object’s properties, see <a href=\"https://github.com/emberjs/data/blob/f1be2af71d7402d034bc034d9502733647cad295/packages/ember-data/lib/system/debug/debug_info.js\">Ember Data’s\ncustomization</a>.</p>","link":"./v2.0.0/ember-inspector/object-inspector.html","spaLink":"#/v2.0.0/ember-inspector/object-inspector","title":"Custom Property Grouping"},{"content":"<h3 id=\"-accuracy\">Accuracy</h3><p>Using the Inspector adds a delay to your rendering, so the durations you see\nare not an accurate representation of the speed of your production apps. Use these\ntimes to compare durations and debug rendering bottlenecks, but not as\na way to accurately measure rendering times.</p>","link":"./v2.0.0/ember-inspector/render-performance.html","spaLink":"#/v2.0.0/ember-inspector/render-performance","title":"Accuracy"},{"content":"<h3 id=\"-toolbar\">Toolbar</h3><p>Click on the “clear” icon to remove existing render logs.</p><p>To measure components and templates that are rendered on initial application boot,\nclick on the “Reload” button at the top. This button ensures that the Inspector starts\nmeasuring render times when your app boots.</p><p>To filter the logs, type a query in the search box.</p>","link":"./v2.0.0/ember-inspector/render-performance.html","spaLink":"#/v2.0.0/ember-inspector/render-performance","title":"Toolbar"},{"content":"<h3 id=\"-viewing-the-current-route\">Viewing the Current Route</h3><p>The Inspector highlights the currently active routes. However, if your app has grown too large for this to be useful, you can use the <code>Current Route Only</code>\ncheckbox to hide all routes except the currently active ones.</p><p><img src=\"../../images/guides/ember-inspector/routes-current-route.png\" width=\"680\"></p>","link":"./v2.0.0/ember-inspector/routes.html","spaLink":"#/v2.0.0/ember-inspector/routes","title":"Viewing the Current Route"},{"content":"<h3 id=\"-promise-states-and-filtering\">Promise States and Filtering</h3><p>Promises have different colors based on their state.</p><p><img src=\"../../images/guides/ember-inspector/promises-fulfilled.png\" width=\"300\"></p><p><img src=\"../../images/guides/ember-inspector/promises-pending.png\" width=\"300\"></p><p><img src=\"../../images/guides/ember-inspector/promises-rejected.png\" width=\"300\"></p><p>You can filter by clicking on the following pills: <code>Rejected</code>, <code>Pending</code>, <code>Fulfilled</code>.</p><p><img src=\"../../images/guides/ember-inspector/promises-toolbar.png\" width=\"600\"></p><p>You can also search for Promises by typing a query in the search box.</p><p>To clear the currently logged Promises, click on the clear icon on the\ntop left of the tab.</p>","link":"./v2.0.0/ember-inspector/promises.html","spaLink":"#/v2.0.0/ember-inspector/promises","title":"Promise States and Filtering"},{"content":"<h3 id=\"-inspecting-settled-values\">Inspecting Settled Values</h3><p>If the fulfillment value of a Promise is an Ember object or an array, you can click\non that object to open it in the Object Inspector.</p><p><img src=\"../../images/guides/ember-inspector/promises-object-inspector.png\" width=\"400\"></p><p>If the rejection value is an <code>Error</code> object, you can send its stack trace to\nthe console.</p><p><img src=\"../../images/guides/ember-inspector/promises-error.png\" width=\"400\"></p><p>You can also click on the <code>$E</code> button to send the value to the console.</p>","link":"./v2.0.0/ember-inspector/promises.html","spaLink":"#/v2.0.0/ember-inspector/promises","title":"Inspecting Settled Values"},{"content":"<h3 id=\"-tracing\">Tracing</h3><p>The Inspector provides a way to view a Promise’s stack trace.\nTracing Promises is disabled by default for performance reasons. To\nenable tracing, check the <code>Trace promise</code> checkbox. You may want to\nreload to trace existing Promises.</p><p><img src=\"../../images/guides/ember-inspector/promises-trace-checkbox.png\" width=\"200\"></p><p>To trace a Promise, click on the <code>Trace</code> button next to the label,\nwhich will send the Promise stack trace to the console.</p><p><img src=\"../../images/guides/ember-inspector/promises-trace.png\" width=\"300\"></p>","link":"./v2.0.0/ember-inspector/promises.html","spaLink":"#/v2.0.0/ember-inspector/promises","title":"Tracing"},{"content":"<h3 id=\"-labeling-promises\">Labeling Promises</h3><p>Promises generated by Ember are all labeled by default.\nYou can also label your own RSVP Promises to find them in the Inspector’s Promises tab.\nAll RSVP methods can take a label as the final argument.</p>","link":"./v2.0.0/ember-inspector/promises.html","spaLink":"#/v2.0.0/ember-inspector/promises","title":"Labeling Promises"},{"content":"<h3 id=\"-inspecting-templates\">Inspecting Templates</h3><p>To see how a template was rendered by Ember, click on the template in the View Tree. If \nyou’re using Chrome or Firefox, you’ll be sent to the Elements panel with that DOM element selected.</p><p><img src=\"../../images/guides/ember-inspector/view-tree-template.png\" width=\"350\"></p><p><img src=\"../../images/guides/ember-inspector/view-tree-elements-panel.png\" width=\"450\"></p>","link":"./v2.0.0/ember-inspector/view-tree.html","spaLink":"#/v2.0.0/ember-inspector/view-tree","title":"Inspecting Templates"},{"content":"<h3 id=\"-components-and-inline-views\">Components and Inline Views</h3><p>The View Tree ignores components and inline views by default. To load these into the View Tree check the <code>Components</code> and <code>All Views</code> checkboxes.</p><p><img src=\"../../images/guides/ember-inspector/view-tree-components.png\" width=\"600\"></p><p>You can then inspect components using the Object Inspector.</p>","link":"./v2.0.0/ember-inspector/view-tree.html","spaLink":"#/v2.0.0/ember-inspector/view-tree","title":"Components and Inline Views"},{"content":"<h3 id=\"-highlighting-templates\">Highlighting Templates</h3><p>When you hover over the items in the View Tree, the related templates will be\nhighlighted in your app. For every highlighted template, you can see the\ntemplate name, and its associated objects.</p><p><img src=\"../../images/guides/ember-inspector/view-tree-highlight.png\" width=\"680\"></p><p>If you want to highlight a template or component directly within your app, click on the magnifying glass in the Inspector, then hover over the app.\nAs your our mouse passes over it, the related template or component will be\nhighlighted.</p><p><img src=\"../../images/guides/ember-inspector/view-tree-magnifying-glass.png\" width=\"500\"></p><p>If you click on a highlighted template or component, the Inspector will select it. You can then\nclick on the backing objects to send them to the object inspector.</p><p><img src=\"../../images/guides/ember-inspector/view-tree-inspect.png\"></p><p>Click on the <code>X</code> button to unselect a template.</p>","link":"./v2.0.0/ember-inspector/view-tree.html","spaLink":"#/v2.0.0/ember-inspector/view-tree","title":"Highlighting Templates"},{"content":"<h3 id=\"-duration\">Duration</h3><p>The Duration column displays the render time for a given template, including the template’s children.</p><p><img src=\"../../images/guides/ember-inspector/view-tree-duration.png\" width=\"500\"></p><p>By measuring the render time, the Inspector adds a slight delay to the rendering process. As such, the duration is not an exact representation of expected rendering time for a production application. Thus, the rendering duration is more useful to compare times than as an absolute measure of performance.</p>","link":"./v2.0.0/ember-inspector/view-tree.html","spaLink":"#/v2.0.0/ember-inspector/view-tree","title":"Duration"},{"content":"<h3 id=\"-ember-application-not-detected\">Ember Application Not Detected</h3><p>If the Inspector cannot detect an Ember application, you will see\nthe following message:</p><p><img src=\"../../images/guides/ember-inspector/troubleshooting-application-not-detected.png\" width=\"350\"></p><p>Some of the reasons this may happen:</p><ul>\n<li>This is not an Ember application</li>\n<li>You are using an old Ember version ( &lt; 1.0 ).</li>\n<li>You are using a protocol other than http or https. For file:// protocol,\nfollow <a href=\"../installation/#toc_file-protocol\">these steps</a>.</li>\n<li>The Ember application is inside a sandboxed iframe with no url (if you\nare using JS Bin, follow <a href=\"#toc_using-the-inspector-with-jsbin\">these steps</a>.</li>\n</ul>","link":"./v2.0.0/ember-inspector/troubleshooting.html","spaLink":"#/v2.0.0/ember-inspector/troubleshooting","title":"Ember Application Not Detected"},{"content":"<h3 id=\"-using-the-inspector-with-js-bin\">Using the Inspector with JS Bin</h3><p>Due to the way JS Bin uses iframes, the Inspector doesn’t work with edit\nmode. To use the Inspector with JS Bin, switch to the “live preview” mode by clicking on\nthe arrow circled below.</p><p><img src=\"../../images/guides/ember-inspector/troubleshooting-jsbin.png\" width=\"350\"></p>","link":"./v2.0.0/ember-inspector/troubleshooting.html","spaLink":"#/v2.0.0/ember-inspector/troubleshooting","title":"Using the Inspector with JS Bin"},{"content":"<h3 id=\"-application-is-not-detected-without-reload\">Application is not Detected Without Reload</h3><p>If you always have to reload your application after you open the Inspector, that may mean\nthe application’s booted state is corrupt. This happens if you call <code>advanceReadiness</code> or\n<code>deferReadiness</code> after the application has already booted.</p>","link":"./v2.0.0/ember-inspector/troubleshooting.html","spaLink":"#/v2.0.0/ember-inspector/troubleshooting","title":"Application is not Detected Without Reload"},{"content":"<h3 id=\"-data-adapter-not-detected\">Data Adapter Not Detected</h3><p>When you click on the Data tab, and see this message:</p><p><img src=\"../../images/guides/ember-inspector/troubleshooting-data-adapter.png\" width=\"350\"></p><p>It means that the data persistence library you’re using does not support the Inspector.\nIf you are the library’s author, <a href=\"../data/#toc_building-a-data-custom-adapter\">see this section</a> on how to add Inspector support to your library.</p>","link":"./v2.0.0/ember-inspector/troubleshooting.html","spaLink":"#/v2.0.0/ember-inspector/troubleshooting","title":"Data Adapter Not Detected"},{"content":"<h3 id=\"-promises-not-detected\">Promises Not Detected</h3><p>You click on the Promises tab, and see this message:</p><p><img src=\"../../images/guides/ember-inspector/troubleshooting-promises-not-detected.png\" width=\"350\"></p><p>This happens if you are using a version of Ember &lt; 1.3.</p><p>If the Promises tab is working, but there are Promises you can’t find,\nit’s probably because these Promises were created before the\nInspector was activated. To detect Promises the moment the app boots, click on the <code>Reload</code> button below:</p><p><img src=\"../../images/guides/ember-inspector/troubleshooting-promises-toolbar.png\" width=\"350\"></p><p>Firefox addons need to go through a review process with each update, so the Inspector is usually one version behind.</p><p>Unfortunately we don’t have control over the Firefox review process, so if you need\nthe latest Inspector version, download and install it manually from\n<a href=\"https://github.com/emberjs/ember-inspector\">GitHub</a>.</p>","link":"./v2.0.0/ember-inspector/troubleshooting.html","spaLink":"#/v2.0.0/ember-inspector/troubleshooting","title":"Promises Not Detected"},{"content":"<h2 id=\"-addons\">Addons</h2><p>Ember Addons are installed using NPM (e.g. <code>npm install --save-dev ember-cli-sass</code>).\nAddons may bring in other dependencies by modifying your project’s <code>bower.json</code> file automatically.</p><p>You can find listings of addons on <a href=\"http://emberobserver.com\">Ember Observer</a>.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"ADDONS"},{"content":"<h2 id=\"-bower\">Bower</h2><p>Ember CLI uses the <a href=\"http://bower.io\">Bower</a> package manager,\nmaking it easy to keep your front-end dependencies up to date.\nThe Bower configuration file, <code>bower.json</code>, is located at the root of your Ember CLI project,\nand lists the dependencies for your project.\nExecuting <code>bower install</code> will install all of the dependencies listed in <code>bower.json</code> in one step.</p><p>Ember CLI watches <code>bower.json</code> for changes.\nThus it reloads your app if you install new dependencies via <code>bower install &lt;dependencies&gt; --save</code>.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"BOWER"},{"content":"<h2 id=\"-other-assets\">Other assets</h2><p>Assets not available as an addon or Bower package should be placed in the <code>vendor</code> folder in your project.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"OTHER ASSETS"},{"content":"<h2 id=\"-compiling-assets\">Compiling Assets</h2><p>When you’re using dependencies that are not included in an addon,\nyou will have to instruct Ember CLI to include your assets in the build.\nThis is done using the asset manifest file <code>ember-cli-build.js</code>.\nYou should only try to import assets located in the <code>bower_components</code> and <code>vendor</code> folders.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"COMPILING ASSETS"},{"content":"<h3 id=\"-compiling-assets-globals-provided-by-javascript-assets\">Globals provided by Javascript assets</h3><p>The globals provided by some assets (like <code>moment</code> in the below example) can be used in your application\nwithout the need to <code>import</code> them.\nProvide the asset path as the first and only argument.</p><p>You will need to add <code>\"moment\": true</code> to the <code>predef</code> section in <code>.jshintrc</code> to prevent JSHint errors\nabout using an undefined variable.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"Globals provided by Javascript assets"},{"content":"<h3 id=\"-compiling-assets-amd-javascript-modules\">AMD Javascript modules</h3><p>Provide the asset path as the first argument, and the list of modules and exports as the second.</p><p>You can now <code>import</code> them in your app. (e.g. <code>import { raw as icAjaxRaw } from 'ic-ajax';</code>)</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"AMD Javascript modules"},{"content":"<h3 id=\"-compiling-assets-environment-specific-assets\">Environment Specific Assets</h3><p>If you need to use different assets in different environments, specify an object as the first parameter.\nThat object’s key should be the environment name, and the value should be the asset to use in that environment.</p><p>If you need to import an asset in only one environment you can wrap <code>app.import</code> in an <code>if</code> statement.\nFor assets needed during testing, you should also use the <code>{type: 'test'}</code> option to make sure they\nare available in test mode.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"Environment Specific Assets"},{"content":"<h3 id=\"-compiling-assets-css\">CSS</h3><p>Provide the asset path as the first argument:</p><p>All style assets added this way will be concatenated and output as <code>/assets/vendor.css</code>.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"CSS"},{"content":"<h3 id=\"-compiling-assets-other-assets\">Other Assets</h3><p>All other assets like images or fonts can also be added via <code>import()</code>.\nBy default, they\nwill be copied to <code>dist/</code> as they are.</p><p>This example would create the font file in <code>dist/font-awesome/fonts/fontawesome-webfont.ttf</code>.</p><p>You can also optionally tell <code>import()</code> to place the file at a different path.\nThe following example will copy the file to <code>dist/assets/fontawesome-webfont.ttf</code>.</p><p>If you need to load certain dependencies before others,\nyou can set the <code>prepend</code> property equal to <code>true</code> on the second argument of <code>import()</code>.\nThis will prepend the dependency to the vendor file instead of appending it, which is the default behavior.</p>","link":"./v2.2.0/addons-and-dependencies/managing-dependencies.html","spaLink":"#/v2.2.0/addons-and-dependencies/managing-dependencies","title":"Other Assets"},{"content":"<h2 id=\"-application-initializers\">Application Initializers</h2><p>Application initializers can be created with Ember CLI’s <code>initializer</code> generator:</p><p>Let’s customize the <code>shopping-cart</code> initializer to inject a <code>cart</code> property into all the routes in your application:</p>","link":"./v2.2.0/applications/initializers.html","spaLink":"#/v2.2.0/applications/initializers","title":"APPLICATION INITIALIZERS"},{"content":"<h2 id=\"-application-instance-initializers\">Application Instance Initializers</h2><p>Application instance initializers can be created with Ember CLI’s <code>instance-initializer</code> generator:</p><p>Let’s add some simple logging to indicate that the instance has booted:</p>","link":"./v2.2.0/applications/initializers.html","spaLink":"#/v2.2.0/applications/initializers","title":"APPLICATION INSTANCE INITIALIZERS"},{"content":"<h2 id=\"-specifying-initializer-order\">Specifying Initializer Order</h2><p>If you’d like to control the order in which initializers run, you can use the <code>before</code> and/or <code>after</code> options:</p><p>Note that ordering only applies to initializers of the same type (i.e. application or application instance).\nApplication initializers will always run before application instance initializers.</p>","link":"./v2.2.0/applications/initializers.html","spaLink":"#/v2.2.0/applications/initializers","title":"SPECIFYING INITIALIZER ORDER"},{"content":"<h2 id=\"-factory-registrations\">Factory Registrations</h2><p>A factory can represent any part of your application, like a <em>route</em>, <em>template</em>, or custom class.\nEvery factory is registered with a particular key.\nFor example, the index template is registered with the key <code>template:index</code>,\nand the application route is registered with the key <code>route:application</code>.</p><p>Registration keys have two segments split by a colon (<code>:</code>).\nThe first segment is the framework factory type, and the second is the name of the particular factory.\nHence, the <code>index</code> template has the key <code>template:index</code>.\nEmber has several built-in factory types, such as <code>service</code>, <code>route</code>, <code>template</code>, and <code>component</code>.</p><p>You can create your own factory type by simply registering a factory with the new type.\nFor example, to create a <code>user</code> type,\nyou’d simply register your factory with <code>application.register('user:user-to-register')</code>.</p><p>Factory registrations must be performed either in application\nor application instance initializers (with the former being much more common).</p><p>For example, an application initializer could register a <code>Logger</code> factory with the key <code>logger:main</code>:</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"FACTORY REGISTRATIONS"},{"content":"<h3 id=\"-factory-registrations-registering-already-instantiated-objects\">Registering Already Instantiated Objects</h3><p>By default, Ember will attempt to instantiate a registered factory when it is looked up.\nWhen registering an already instantiated object instead of a class,\nuse the <code>instantiate: false</code> option to avoid attempts to re-instantiate it during lookups.</p><p>In the following example, the <code>logger</code> is a plain JavaScript object that should\nbe returned “as is” when it’s looked up:</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"Registering Already Instantiated Objects"},{"content":"<h3 id=\"-factory-registrations-registering-singletons-vs-non-singletons\">Registering Singletons vs. Non-Singletons</h3><p>By default, registrations are treated as “singletons”.\nThis simply means that an instance will be created when it is first looked up,\nand this same instance will be cached and returned from subsequent lookups.</p><p>When you want fresh objects to be created for every lookup,\nregister your factories as non-singletons using the <code>singleton: false</code> option.</p><p>In the following example, the <code>Message</code> class is registered as a non-singleton:</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"Registering Singletons vs. Non-Singletons"},{"content":"<h2 id=\"-factory-injections\">Factory Injections</h2><p>Once a factory is registered, it can be “injected” where it is needed.</p><p>Factories can be injected into whole “types” of factories with <em>type injections</em>. For example:</p><p>As a result of this type injection,\nall factories of the type <code>route</code> will be instantiated with the property <code>logger</code> injected.\nThe value of <code>logger</code> will come from the factory named <code>logger:main</code>.</p><p>Routes in this example application can now access the injected logger:</p><p>Injections can also be made on a specific factory by using its full key:</p><p>In this case, the logger will only be injected on the index route.</p><p>Injections can be made onto any class that requires instantiation.\nThis includes all of Ember’s major framework classes, such as components, helpers, routes, and the router.</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"FACTORY INJECTIONS"},{"content":"<h3 id=\"-factory-injections-ad-hoc-injections\">Ad Hoc Injections</h3><p>Dependency injections can also be declared directly on Ember classes using <code>Ember.inject</code>.\nCurrently, <code>Ember.inject</code> supports injecting controllers (via <code>Ember.inject.controller</code>)\nand services (via <code>Ember.inject.service</code>).</p><p>The following code injects the <code>shopping-cart</code> service on the <code>cart-contents</code> component as the property <code>cart</code>:</p><p>If you’d like to inject a service with the same name as the property,\nsimply leave off the service name (the dasherized version of the name will be used):</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"Ad Hoc Injections"},{"content":"<h2 id=\"-factory-instance-lookups\">Factory Instance Lookups</h2><p>To fetch an instantiated factory from the running application you can call the\n<a href=\"http://emberjs.com/api/classes/Ember.ApplicationInstance.html#method_lookup\"><code>lookup</code></a> method on an application instance. This method takes a string\nto identify a factory and returns the appropriate object.</p><p>The application instance is passed to Ember’s instance initializer hooks and it\nis added as the “owner” of each object that was instantiated by the application\ninstance.</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"FACTORY INSTANCE LOOKUPS"},{"content":"<h3 id=\"-factory-instance-lookups-using-an-application-instance-within-an-instance-initializer\">Using an Application Instance Within an Instance Initializer</h3><p>Instance initializers receive an application instance as an argument, providing\nan opportunity to look up an instance of a registered factory.</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"Using an Application Instance Within an Instance Initializer"},{"content":"<h3 id=\"-factory-instance-lookups-getting-an-application-instance-from-a-factory-instance\">Getting an Application Instance from a Factory Instance</h3><p><a href=\"http://emberjs.com/api/#method_getOwner\"><code>Ember.getOwner</code></a> will retrieve the application instance that “owns” an\nobject. This means that framework objects like components, helpers, and routes\ncan use <a href=\"http://emberjs.com/api/#method_getOwner\"><code>Ember.getOwner</code></a> to perform lookups through their application\ninstance at runtime.</p><p>For example, this component plays songs with different audio services based\non a song’s <code>audioType</code>.</p>","link":"./v2.2.0/applications/dependency-injection.html","spaLink":"#/v2.2.0/applications/dependency-injection","title":"Getting an Application Instance from a Factory Instance"},{"content":"<h2 id=\"-why-is-the-run-loop-useful\">Why is the run loop useful?</h2><p>Very often, batching similar work has benefits.\nWeb browsers do something quite similar by batching changes to the DOM.</p><p>Consider the following HTML snippet:</p><p>and executing the following code:</p><p>In this example, the sequence of code forced the browser to recalculate style, and relayout after each step.\nHowever, if we were able to batch similar jobs together,\nthe browser would have only needed to recalculate the style and layout once.</p><p>Interestingly, this pattern holds true for many other types of work.\nEssentially, batching similar work allows for better pipelining, and further optimization.</p><p>Let’s look at a similar example that is optimized in Ember, starting with a <code>User</code> object:</p><p>and a template to display its attributes:</p><p>If we execute the following code without the run loop:</p><p>We see that the browser will rerender the template twice.</p><p>However, if we have the run loop in the above code,\nthe browser will only rerender the template once the attributes have all been set.</p><p>In the above example with the run loop, since the user’s attributes end up at the same values as before execution,\nthe template will not even rerender!</p><p>It is of course possible to optimize these scenarios on a case-by-case basis,\nbut getting them for free is much nicer.\nUsing the run loop, we can apply these classes of optimizations not only for each scenario, but holistically app-wide.</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"WHY IS THE RUN LOOP USEFUL?"},{"content":"<h2 id=\"-how-does-the-run-loop-work-in-ember\">How does the Run Loop work in Ember?</h2><p>As mentioned earlier, we schedule work (in the form of function invocations) on queues,\nand these queues are processed to completion in priority order.</p><p>What are the queues, and what is their priority order?</p><p>Because the priority is first to last, the “sync” queue has higher priority than the “render” or “destroy” queue.</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"HOW DOES THE RUN LOOP WORK IN EMBER?"},{"content":"<h2 id=\"-what-happens-in-these-queues\">What happens in these queues?</h2><ul>\n<li>The <code>sync</code> queue contains binding synchronization jobs.</li>\n<li>The <code>actions</code> queue is the general work queue and will typically contain scheduled tasks e.g. promises.</li>\n<li>The <code>routerTransitions</code> queue contains transition jobs in the router.</li>\n<li>The <code>render</code> queue contains jobs meant for rendering, these will typically update the DOM.</li>\n<li>The <code>afterRender</code> queue contains jobs meant to be run after all previously scheduled render tasks are complete.\nThis is often good for 3rd-party DOM manipulation libraries,\nthat should only be run after an entire tree of DOM has been updated.</li>\n<li>The <code>destroy</code> queue contains jobs to finish the teardown of objects other jobs have scheduled to destroy.</li>\n</ul>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"WHAT HAPPENS IN THESE QUEUES?"},{"content":"<h2 id=\"-in-what-order-are-jobs-executed-on-the-queues\">In what order are jobs executed on the queues?</h2><p>The algorithm works this way:</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"IN WHAT ORDER ARE JOBS EXECUTED ON THE QUEUES?"},{"content":"<h2 id=\"-an-example-of-the-internals\">An example of the internals</h2><p>Rather than writing the higher level app code that internally invokes the various run loop scheduling functions,\nwe have stripped away the covers, and shown the raw run-loop interactions.</p><p>Working with this API directly is not common in most Ember apps,\nbut understanding this example will help you to understand the run-loops algorithm,\nwhich will make you a better Ember developer.</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"AN EXAMPLE OF THE INTERNALS"},{"content":"<h2 id=\"-how-do-i-tell-ember-to-start-a-run-loop\">How do I tell Ember to start a run loop?</h2><p>You should begin a run loop when the callback fires.</p><p>The <code>Ember.run</code> method can be used to create a runloop.\nIn this example, jQuery and <code>Ember.run</code> are used to handle a click event and run some Ember code.</p><p>This example uses the <code>=&gt;</code> function syntax, which is a [new ES2015 syntax for callback functions]\n(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a>)\nthat provides a lexical <code>this</code>.\nIf this syntax is new,\nthink of it as a function that has the same <code>this</code> as the context it is defined in.</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"HOW DO I TELL EMBER TO START A RUN LOOP?"},{"content":"<h2 id=\"-what-happens-if-i-forget-to-start-a-run-loop-in-an-async-handler\">What happens if I forget to start a run loop in an async handler?</h2><p>As mentioned above, you should wrap any non-Ember async callbacks in <code>Ember.run</code>.\nIf you don’t, Ember will try to approximate a beginning and end for you.\nConsider the following callback:</p><p>The runloop API calls that <em>schedule</em> work i.e. <a href=\"http://emberjs.com/api/classes/Ember.run.html#method_schedule\"><code>run.schedule</code></a>, <a href=\"http://emberjs.com/api/classes/Ember.run.html#method_scheduleOnce\"><code>run.scheduleOnce</code></a>,\n<a href=\"http://emberjs.com/api/classes/Ember.run.html#method_once\"><code>run.once</code></a> have the property that they will approximate a runloop for you if one does not already exist.\nThese automatically created runloops we call <em>autoruns</em>.</p><p>Here is some pseudocode to describe what happens using the example above:</p><p>Although autoruns are convenient, they are suboptimal.\nThe current JS frame is allowed to end before the run loop is flushed,\nwhich sometimes means the browser will take the opportunity to do other things, like garbage collection.\nGC running in between data changing and DOM rerendering can cause visual lag and should be minimized.</p><p>Relying on autoruns is not a rigorous or efficient way to use the runloop.\nWrapping event handlers manually is preferred.</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"WHAT HAPPENS IF I FORGET TO START A RUN LOOP IN AN ASYNC HANDLER?"},{"content":"<h2 id=\"-how-is-runloop-behaviour-different-when-testing\">How is runloop behaviour different when testing?</h2><p>When your application is in <em>testing mode</em> then Ember will throw an error if you try to schedule work\nwithout an available runloop.</p><p>Autoruns are disabled in testing for several reasons:</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"HOW IS RUNLOOP BEHAVIOUR DIFFERENT WHEN TESTING?"},{"content":"<h2 id=\"-where-can-i-find-more-information\">Where can I find more information?</h2><p>Check out the <a href=\"http://emberjs.com/api/classes/Ember.run.html\">Ember.run</a> API documentation,\nas well as the <a href=\"https://github.com/ebryn/backburner.js/\">Backburner library</a> that powers the run loop.</p>","link":"./v2.2.0/applications/run-loop.html","spaLink":"#/v2.2.0/applications/run-loop","title":"WHERE CAN I FIND MORE INFORMATION?"},{"content":"<h3 id=\"-customizing-the-element\">Customizing the Element</h3><p>To use a tag other than <code>div</code>, subclass <code>Ember.Component</code> and assign it\na <code>tagName</code> property. This property can be any valid HTML5 tag name as a\nstring.</p>","link":"./v2.2.0/components/customizing-a-components-element.html","spaLink":"#/v2.2.0/components/customizing-a-components-element","title":"Customizing the Element"},{"content":"<h3 id=\"-customizing-class-names\">Customizing Class Names</h3><p>You can also specify which class names are applied to the component’s\nelement by setting its <code>classNames</code> property to an array of strings:</p><p>If you want class names to be determined by properties of the component,\nyou can use class name bindings. If you bind to a Boolean property, the\nclass name will be added or removed depending on the value:</p><p>This component would render the following:</p><p>If <code>isUrgent</code> is changed to <code>false</code>, then the <code>is-urgent</code> class name will be removed.</p><p>By default, the name of the Boolean property is dasherized. You can customize the class name\napplied by delimiting it with a colon:</p><p>This would render this HTML:</p><p>Besides the custom class name for the value being <code>true</code>, you can also specify a class name which is used when the value is <code>false</code>:</p><p>This would render this HTML:</p><p>You can also specify a class which should only be added when the property is\n<code>false</code> by declaring <code>classNameBindings</code> like this:</p><p>This would render this HTML:</p><p>If the <code>isEnabled</code> property is set to <code>true</code>, no class name is added:</p><p>If the bound property’s value is a string, that value will be added as a class name without\nmodification:</p><p>This would render this HTML:</p>","link":"./v2.2.0/components/customizing-a-components-element.html","spaLink":"#/v2.2.0/components/customizing-a-components-element","title":"Customizing Class Names"},{"content":"<h3 id=\"-customizing-attributes\">Customizing Attributes</h3><p>You can bind attributes to the DOM element that represents a component\nby using <code>attributeBindings</code>:</p><p>You can also bind these attributes to differently named properties:</p><p>If the attribute is null, it won’t be rendered:</p><p>This would render this HTML when no title is passed to the component:</p><p>…and this HTML when a title of “Ember JS” is passed to the component:</p>","link":"./v2.2.0/components/customizing-a-components-element.html","spaLink":"#/v2.2.0/components/customizing-a-components-element","title":"Customizing Attributes"},{"content":"<h3 id=\"-defining-services\">Defining Services</h3><p>Services can be generated using Ember CLI’s <code>service</code> generator.\nFor example, the following command will create the <code>ShoppingCart</code> service:</p><p>Services must extend the <a href=\"http://emberjs.com/api/classes/Ember.Service.html\"><code>Ember.Service</code></a> base class:</p><p>Like any Ember object, a service is initialized and can have properties and methods of its own.\nBelow the shopping cart service manages an items array that represents the items currently in the shopping cart.</p>","link":"./v2.2.0/applications/services.html","spaLink":"#/v2.2.0/applications/services","title":"Defining Services"},{"content":"<h3 id=\"-accessing-services\">Accessing Services</h3><p>To access a service,\nyou can inject it in any container-resolved object such as a component or another service using the <code>Ember.inject.service</code> function.\nThere are 2 ways to use this function.\nYou can either invoke it with no arguments, or you can pass it the registered name of the service.\nWhen no arguments are passed the services is loaded based in the name of the variable key.\nYou can load the shopping cart service with no arguments like below.</p><p>The other way to inject a service is to provide the name of the service as the argument.</p><p>This injects the shopping cart service into the component and makes it available as the <code>cart</code> property.</p><p>Injected properties are lazy loaded; meaning the service will not be instantiated until the property is explicitly called.\nTherefore you need to access services in your component using the <code>get</code> function otherwise you might get an undefined.</p><p>Once loaded, a service will persist until the application exits.</p><p>Below we add a remove action to the <code>cart-contents</code> component.\nNotice that below we access the <code>cart</code> service with a call to<code>this.get</code>.</p><p>Once injected into a component, a service can also be used in the template.\nNote <code>cart</code> being used below to get data from the cart.</p>","link":"./v2.2.0/applications/services.html","spaLink":"#/v2.2.0/applications/services","title":"Accessing Services"},{"content":"<h2 id=\"-sending-actions\">Sending Actions</h2><p>In some cases your component needs to define event handlers, perhaps to support\nvarious draggable behaviors. For example, a component may need to send an <code>id</code>\nwhen it receives a drop event:</p><p>You can define the component’s event handlers to manage the drop event.\nAnd if you need to, you may also stop events from bubbling, by using\n<code>return false;</code>.</p>","link":"./v2.2.0/components/handling-events.html","spaLink":"#/v2.2.0/components/handling-events","title":"SENDING ACTIONS"},{"content":"<h2 id=\"-event-names\">Event Names</h2><p>The event handling examples described above respond to one set of events.\nThe names of the built-in events are listed below. Custom events can be\nregistered by using <a href=\"http://emberjs.com/api/classes/Ember.Application.html#property_customEvents\">Ember.Application.customEvents</a>.</p><p>Touch events:</p><ul>\n<li><code>touchStart</code></li>\n<li><code>touchMove</code></li>\n<li><code>touchEnd</code></li>\n<li><code>touchCancel</code></li>\n</ul><p>Keyboard events</p><ul>\n<li><code>keyDown</code></li>\n<li><code>keyUp</code></li>\n<li><code>keyPress</code></li>\n</ul><p>Mouse events</p><ul>\n<li><code>mouseDown</code></li>\n<li><code>mouseUp</code></li>\n<li><code>contextMenu</code></li>\n<li><code>click</code></li>\n<li><code>doubleClick</code></li>\n<li><code>mouseMove</code></li>\n<li><code>focusIn</code></li>\n<li><code>focusOut</code></li>\n<li><code>mouseEnter</code></li>\n<li><code>mouseLeave</code></li>\n</ul><p>Form events:</p><ul>\n<li><code>submit</code></li>\n<li><code>change</code></li>\n<li><code>focusIn</code></li>\n<li><code>focusOut</code></li>\n<li><code>input</code></li>\n</ul><p>HTML5 drag and drop events:</p><ul>\n<li><code>dragStart</code></li>\n<li><code>drag</code></li>\n<li><code>dragEnter</code></li>\n<li><code>dragLeave</code></li>\n<li><code>dragOver</code></li>\n<li><code>dragEnd</code></li>\n<li><code>drop</code></li>\n</ul>","link":"./v2.2.0/components/handling-events.html","spaLink":"#/v2.2.0/components/handling-events","title":"EVENT NAMES"},{"content":"<h2 id=\"-defining-a-component-subclass\">Defining a Component Subclass</h2><p>Often times, your components will just encapsulate certain snippets of\nHandlebars templates that you find yourself using over and over. In\nthose cases, you do not need to write any JavaScript at all. Define\nthe Handlebars template as described above and use the component that is\ncreated.</p><p>If you need to customize the behavior of the component you’ll\nneed to define a subclass of <a href=\"http://emberjs.com/api/classes/Ember.Component.html\"><code>Ember.Component</code></a>. For example, you would\nneed a custom subclass if you wanted to change a component’s element,\nrespond to actions from the component’s template, or manually make\nchanges to the component’s element using JavaScript.</p><p>Ember knows which subclass powers a component based on its filename. For\nexample, if you have a component called <code>blog-post</code>, you would create a\nfile at <code>app/components/blog-post.js</code>. If your component was called\n<code>audio-player-controls</code>, the file name would be at\n<code>app/components/audio-player-controls.js</code>.</p>","link":"./v2.2.0/components/defining-a-component.html","spaLink":"#/v2.2.0/components/defining-a-component","title":"DEFINING A COMPONENT SUBCLASS"},{"content":"<h2 id=\"-dynamically-rendering-a-component\">Dynamically rendering a component</h2><p>The <a href=\"http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component\"><code>{{component}}</code></a> helper can be used to defer the selection of a component to\nrun time. The <code>{{my-component}}</code> syntax always renders the same component,\nwhile using the <code>{{component}}</code> helper allows choosing a component to render on\nthe fly. This is useful in cases where you want to interact with different\nexternal libraries depending on the data. Using the <code>{{component}}</code> helper would\nallow you to keep different logic well separated.</p><p>The first parameter of the helper is the name of a component to render, as a\nstring. So <code>{{component 'blog-post'}}</code> is the same as using <code>{{blog-post}}</code>.</p><p>The real value of <a href=\"http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component\"><code>{{component}}</code></a> comes from being able to dynamically pick\nthe component being rendered. Below is an example of using the helper as a\nmeans of choosing different components for displaying different kinds of posts:</p><p>When the parameter passed to <code>{{component}}</code> evaluates to <code>null</code> or <code>undefined</code>,\nthe helper renders nothing. When the parameter changes, the currently rendered\ncomponent is destroyed and the new component is created and brought in.</p><p>Picking different components to render in response to the data allows you to\nhave different template and behavior for each case. The <code>{{component}}</code> helper\nis a powerful tool for improving code modularity.</p>","link":"./v2.2.0/components/defining-a-component.html","spaLink":"#/v2.2.0/components/defining-a-component","title":"DYNAMICALLY RENDERING A COMPONENT"},{"content":"<h2 id=\"-positional-params\">Positional Params</h2><p>In addition to passing parameters in by name, you can pass them in by position.\nIn other words, you can invoke the above component example like this:</p><p>To set the component up to receive parameters this way, you need\nset the <a href=\"http://emberjs.com/api/classes/Ember.Component.html#property_positionalParams\"><code>positionalParams</code></a> attribute in your component class.</p><p>Then you can use the attributes in the component exactly as if they had been\npassed in like <code>{{blog-post title=post.title body=post.body}}</code>.</p><p>Notice that the <code>positionalParams</code> property is added to the class as a\nstatic variable via <code>reopenClass</code>. Positional params are always declared on\nthe component class and cannot be changed while an application runs.</p><p>Alternatively, you can accept an arbitrary number of parameters by\nsetting <code>positionalParams</code> to a string, e.g. <code>positionalParams: 'params'</code>. This\nwill allow you to access those params as an array like so:</p>","link":"./v2.2.0/components/passing-properties-to-a-component.html","spaLink":"#/v2.2.0/components/passing-properties-to-a-component","title":"POSITIONAL PARAMS"},{"content":"<h2 id=\"-order-of-lifecycle-hooks-called\">Order of Lifecycle Hooks Called</h2><p>Listed below are the component lifecycle hooks in order of execution according to render scenario.</p>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"ORDER OF LIFECYCLE HOOKS CALLED"},{"content":"<h3 id=\"-order-of-lifecycle-hooks-called-on-initial-render\">On Initial Render</h3>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"On Initial Render"},{"content":"<h3 id=\"-order-of-lifecycle-hooks-called-on-re-render\">On Re-Render</h3>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"On Re-Render"},{"content":"<h3 id=\"-order-of-lifecycle-hooks-called-on-component-destroy\">On Component Destroy</h3>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"On Component Destroy"},{"content":"<h2 id=\"-lifecycle-hook-examples\">Lifecycle Hook Examples</h2><p>Below are some samples of ways to use lifecycle hooks within your components.</p>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"LIFECYCLE HOOK EXAMPLES"},{"content":"<h3 id=\"-lifecycle-hook-examples-resetting-presentation-state-on-attribute-change-with-didupdateattrs\">Resetting Presentation State on Attribute Change with <code>didUpdateAttrs</code></h3><p><code>didUpdateAttrs</code> runs when the attributes of a component have changed, but not when the component is re-rendered, via <code>component.rerender</code>,\n<code>component.set</code>, or changes in models or services used by the template.</p><p>A <code>didUpdateAttrs</code> is called prior to rerender, you can use this hook to execute code when specific attributes are changed.\nThis hook can be an effective alternative to an observer, as it will run prior to a re-render, but after an attribute has changed.</p><p>An example of this scenario in action is a profile editor component.  As you are editing one user, and the user attribute is changed,\nyou can use <code>didUpdateAttrs</code> to clear any error state that was built up from editing the previous user.</p><p><code>/app/templates/components/profile-editor.hbs</code></p><p><code>/app/components/profile-editor.js</code></p>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"Resetting Presentation State on Attribute Change with didUpdateAttrs"},{"content":"<h3 id=\"-lifecycle-hook-examples-formatting-component-attributes-with-didreceiveattrs\">Formatting Component Attributes with <code>didReceiveAttrs</code></h3><p><code>didReceiveAttrs</code> runs after <code>init</code>, and it also runs on subsequent re-renders, which is useful for logic that is the same on all renders.\nIt does not run when the re-rendered has been initiated internally.</p><p>Since the <code>didReceiveAttrs</code> hook is called every time a component’s attributes are updated whether on render or re-render,\nyou can use the hook to effectively act as an observer, ensuring code is executed every time an attribute changes.</p><p>For example, if you have a component that renders based on a json configuration, but you want to provide your component with the option of taking the config as a string,\nyou can leverage <code>didReceiveAttrs</code> to ensure the incoming config is always parsed.</p>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"Formatting Component Attributes with didReceiveAttrs"},{"content":"<h3 id=\"-lifecycle-hook-examples-integrating-with-third-party-libraries-with-didinsertelement\">Integrating with Third-Party Libraries with <code>didInsertElement</code></h3><p>Suppose you want to integrate your favorite date picker library into an Ember project.\nTypically, 3rd party JS/jQuery libraries require a DOM element to bind to.\nSo, where is the best place to initialize and attach the library?</p><p>After a component successfully renders its backing HTML element into the DOM, it will trigger its <a href=\"http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement\"><code>didInsertElement()</code></a> hook.</p><p>Ember guarantees that, by the time <code>didInsertElement()</code> is called:</p><p>A component’s <a href=\"http://emberjs.com/api/classes/Ember.Component.html#method__\"><code>$()</code></a> method allows you to access the component’s DOM element by returning a JQuery element.\nFor example, you can set an attribute using jQuery’s <code>attr()</code> method:</p><p><a href=\"http://emberjs.com/api/classes/Ember.Component.html#method__\"><code>$()</code></a> will, by default, return a jQuery object for the component’s root element, but you can also target child elements within the component’s template by passing a selector:</p><p>Let’s initialize our date picker by overriding the <a href=\"http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement\"><code>didInsertElement()</code></a> method.</p><p>Date picker libraries usually attach to an <code>&lt;input&gt;</code> element, so we will use jQuery to find an appropriate input within our component’s template.</p><p><a href=\"http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement\"><code>didInsertElement()</code></a> is also a good place to\nattach event listeners. This is particularly useful for custom events or\nother browser events which do not have a <a href=\"http://guides.emberjs.com/v2.1.0/components/handling-events/#toc_event-names\">built-in event\nhandler</a>.</p><p>For example, perhaps you have some custom CSS animations trigger when the component\nis rendered and you want to handle some cleanup when it ends:</p><p>There are a few things to note about the <code>didInsertElement()</code> hook:</p><ul>\n<li>It is only triggered once when the component element is first rendered.</li>\n<li>In cases where you have components nested inside other components, the child component will always receive the <code>didInsertElement()</code> call before its parent does.</li>\n<li>Setting properties on the component in <a href=\"http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement\"><code>didInsertElement()</code></a> triggers a re-render, and  for performance reasons,\nis not allowed.</li>\n<li>While <a href=\"http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement\"><code>didInsertElement()</code></a> is technically an event that can be listened for using <a href=\"http://emberjs.com/api/classes/Ember.Component.html#method_on\"><code>on()</code></a>, it is encouraged to override the default method itself,\nparticularly when order of execution is important.</li>\n</ul>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"Integrating with Third-Party Libraries with didInsertElement"},{"content":"<h3 id=\"-lifecycle-hook-examples-making-updates-to-the-rendered-dom-with-didrender\">Making Updates to the Rendered DOM with <code>didRender</code></h3><p>The <code>didRender</code> hook is called during both render and re-render after the template has rendered and the DOM updated.\nYou can leverage this hook to perform post-processing on the DOM of a component after its been updated.</p><p>In this example, there is a list component that needs to scroll to a selected item when rendered.\nSince scrolling to a specific spot is based on positions within the DOM, we need to ensure that the list has been rendered before scrolling.\nWe can first render this list, and then set the scroll.</p><p>The component below takes a list of items and displays them on the screen.\nAdditionally, it takes an object representing which item is selected and will select and set the scroll top to that item.</p><p>When rendered the component will iterate through the given list and apply a class to the one that is selected.</p><p><code>/app/templates/components/selected-item-list.hbs</code></p><p>The scroll happens on <code>didRender</code>, where it will scroll the component’s container to the element with the selected class name.</p><p><code>/app/components/selected-item-list.js</code></p>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"Making Updates to the Rendered DOM with didRender"},{"content":"<h3 id=\"-lifecycle-hook-examples-detaching-and-tearing-down-component-elements-with-willdestroyelement\">Detaching and Tearing Down Component Elements with <code>willDestroyElement</code></h3><p>When a component detects that it is time to remove itself from the DOM, Ember will trigger the <a href=\"http://emberjs.com/api/classes/Ember.Component.html#event_willDestroyElement\"><code>willDestroyElement()</code></a> method,\nallowing for any teardown logic to be performed.</p><p>Component teardown can be triggered by a number of different conditions.\nFor instance, the user may navigate to a different route, or a conditional Handlebars block surrounding your component may change:</p><p>Let’s use this hook to cleanup our date picker and event listener from above:</p>","link":"./v2.2.0/components/the-component-lifecycle.html","spaLink":"#/v2.2.0/components/the-component-lifecycle","title":"Detaching and Tearing Down Component Elements with willDestroyElement"},{"content":"<h2 id=\"-creating-the-component\">Creating the Component</h2><p>Let’s call our component <code>button-with-confirmation</code>. We can create it by\ntyping:</p><p>We’ll plan to use the component in a template something like this:</p><p>We’ll also want to use the component elsewhere, perhaps like this:</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"CREATING THE COMPONENT"},{"content":"<h2 id=\"-designing-the-action\">Designing the Action</h2><p>When implementing an action on a component, you need to break it down into two steps:</p><p>Let’s take it step by step.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"DESIGNING THE ACTION"},{"content":"<h2 id=\"-implementing-the-action\">Implementing the Action</h2><p>In the parent component, let’s first define what we want to happen when the\nuser clicks the button and then confirms. In this case, we’ll find the user’s\naccount and delete it.</p><p>In Ember, each component can\nhave a property called <code>actions</code>, where you put functions that can be\n<a href=\"../../templates/actions/\">invoked by the user interacting with the component\nitself</a>, or by child components.</p><p>Let’s look at the parent component’s JavaScript file. In this example,\nimagine we have a parent component called <code>user-profile</code> that shows the\nuser’s profile to them.</p><p>We’ll implement an action on the parent component called\n<code>userDidDeleteAccount()</code> that, when called, gets a hypothetical <code>login</code>\n<a href=\"../../applications/services/\">service</a> and calls the service’s\n<code>deleteUser()</code> method.</p><p>Now we’ve implemented our action, but we have not told Ember when we\nwant this action to be triggered, which is the next step.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"IMPLEMENTING THE ACTION"},{"content":"<h2 id=\"-designing-the-child-component\">Designing the Child Component</h2><p>Next, let’s implement the logic to confirm that the user wants to take\nthe action from the component:</p><p>The component template will have a button and a div that shows the confirmation dialog\nbased on the value of <code>confirmShown</code>.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"DESIGNING THE CHILD COMPONENT"},{"content":"<h2 id=\"-passing-the-action-to-the-component\">Passing the Action to the Component</h2><p>Now we need to make it so that the <code>onConfirm()</code> event in the\n<code>button-with-confirmation()</code> component triggers the\n<code>userDidDeleteAccount()</code> action in the <code>user-profile</code> component.\nOne important thing to know about actions is that they’re functions\nyou can call, like any other method on your component.\nSo they can be passed from one component to another like this:</p><p>This snippet says “take the <code>userDidDeleteAccount</code> action from the\nparent and make it available on the child component as\n<code>onConfirm</code>.”</p><p>We can do a similar thing for our <code>send-message</code> component:</p><p>Now, we can use <code>onConfirm</code> in the child component to invoke the action on the\nparent:</p><p><code>this.get('onConfirm')</code> will return the function passed from the parent as the\nvalue of <code>onConfirm</code>, and the following <code>()</code> will invoke the function.</p><p>Like normal attributes, actions can be a property on the component; the\nonly difference is that the property is set to a function that knows how\nto trigger behavior.</p><p>That makes it easy to remember how to add an action to a component. It’s\nlike passing an attribute, but you use the <code>action</code> helper to pass\na function instead.</p><p>Actions in components allow you to\ndecouple an event happening from how it’s handled, leading to modular,\nmore reusable components.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"PASSING THE ACTION TO THE COMPONENT"},{"content":"<h2 id=\"-handling-action-completion\">Handling Action Completion</h2><p>Often actions perform asynchronous tasks, such as making an ajax request to a server.\nSince actions are functions that can be passed in by a parent component, they are able to return values when called.\nThe most common scenario is for an action to return a promise so that the component can handle the action’s completion.</p><p>In our user <code>button-with-confirmation</code> component we want to leave the confirmation modal open until we know that the\noperation has completed successfully.\nThis is accomplished by expecting a promise to be returned from <code>onConfirm</code>.\nUpon resolution of the promise, we set a property used to indicate the visibility of the confirmation modal.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"HANDLING ACTION COMPLETION"},{"content":"<h2 id=\"-passing-arguments\">Passing Arguments</h2><p>Sometimes the parent component invoking an action has some context needed for the action that the child component\ndoesn’t.\nFor these cases, actions passed to a component via the action helper may be invoked with arguments.\nFor example, we’ll update the <code>send-message</code> action to take a message type in addition to the message itself.\nSince the <code>button-with-confirmation</code> component doesn’t know or care about what type of message its collecting, we want\nto provide a message type from <code>send-message</code> when we define the action.</p><p>In this case, the code in <code>button-with-confirmation</code> does not change.\nIt will still invoke <code>onConfirm</code> with no arguments.\nThe action helper will add the arguments provided in the template to the call.</p><p>Action arguments curry, meaning that you can provide partial arguments to the action helper and provide the rest of the\narguments when you call the function within the component javascript file.\nFor example, our <code>button-with-confirmation</code> component will now <a href=\"../wrapping-content-in-a-component/\">yield</a> the content\nof the confirmation dialog to collect extra information to be sent along with the <code>onConfirm</code> action:</p><p>The <code>send-message</code> component provides an input as block content to the <code>button-with-confirmation</code> component, setting\n<code>confirmValue</code>.</p><p>Now when the <code>submitConfirm</code> action is invoked, we call it with the value provided by our yielded input.</p><p>This action will call our bound <code>sendMessage</code> function with both the message type we provided earlier, and the template\nand the message value provided in the component JavaScript.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"PASSING ARGUMENTS"},{"content":"<h2 id=\"-invoking-actions-directly-on-component-collaborators\">Invoking Actions Directly on Component Collaborators</h2><p>Actions can be invoked on objects other than the component directly from the template.  For example, in our\n<code>send-message</code> component we might include a service that processes the <code>sendMessage</code> logic.</p><p>We can tell the action to invoke the <code>sendMessage</code> action directly on the messaging service with the <code>target</code> attribute.</p><p>By supplying the <code>target</code> attribute, the action helper will look to invoke the <code>sendMessage</code> action directly on the messaging\nservice, saving us from writing code on the component that just passes the action along to the service.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"INVOKING ACTIONS DIRECTLY ON COMPONENT COLLABORATORS"},{"content":"<h2 id=\"-destructuring-objects-passed-as-action-arguments\">Destructuring Objects Passed as Action Arguments</h2><p>A component will often not know what information a parent needs to process an action, and will just pass all the\ninformation it has.\nFor example, our <code>user-profile</code> component is going to notify its parent, <code>system-preferences-editor</code>, that a\nuser’s account was deleted, and passes along with it the full user profile object.</p><p>All our <code>system-preferences-editor</code> component really needs to process a user deletion is an account ID.\nFor this case, the action helper provides the <code>value</code> attribute to allow a parent component to dig into the passed\nobject to pull out only what it needs.</p><p>Now when the <code>system-preferences-editor</code> handles the delete action, it receives only the user’s account <code>id</code> string.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"DESTRUCTURING OBJECTS PASSED AS ACTION ARGUMENTS"},{"content":"<h2 id=\"-calling-actions-up-multiple-component-layers\">Calling Actions Up Multiple Component Layers</h2><p>When your components go multiple template layers deep, its common to need to handle an action several layers up the tree.\nUsing the action helper, it is possible to make actions defined in parent components available at the bottom layers of\nyour component tree without adding JavaScript code to the components in between.</p><p>For example, we want to take account deletion out of the <code>user-profile</code> component and handle deletion in its parent.\nIn our template in <code>user-profile.hbs</code>, we can change our action to call <code>deleteCurrentUser</code>,\nwhich will be defined on <code>system-preferences-editor</code>.</p><p>Note that <code>deleteCurrentUser</code> is not in quotes as was the case <a href=\"#toc_passing-the-action-to-the-component\">previously</a>\nwhen the action was local to <code>user-profile</code>.  When you pass an actual function reference (without quotes) to the action\nhelper, it will call the function from the component’s local context.</p><p>Alternately, when you pass a string to the action helper, Ember will attempt to call that function from the\ncomponent’s local <code>actions</code> object.</p><p>Here our <code>system-preferences-editor</code> template passes its <code>deleteUser</code> action into the <code>user-profile</code>\ncomponent’s local <code>deleteCurrentUser</code> property.</p><p>Now when you confirm deletion, the action goes straight to the <code>system-preferences-editor</code> to handle.</p>","link":"./v2.2.0/components/triggering-changes-with-actions.html","spaLink":"#/v2.2.0/components/triggering-changes-with-actions","title":"CALLING ACTIONS UP MULTIPLE COMPONENT LAYERS"},{"content":"<h2 id=\"-life-without-prototype-extension\">Life Without Prototype Extension</h2><p>In order for your application to behave correctly, you will need to\nmanually extend or create the objects that the native objects were\ncreating before.</p>","link":"./v2.2.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.2.0/configuring-ember/disabling-prototype-extensions","title":"LIFE WITHOUT PROTOTYPE EXTENSION"},{"content":"<h3 id=\"-life-without-prototype-extension-arrays\">Arrays</h3><p>Native arrays will no longer implement the functionality needed to\nobserve them. If you disable prototype extension and attempt to use\nnative arrays with things like a template’s <code>{{#each}}</code> helper, Ember.js\nwill have no way to detect changes to the array and the template will\nnot update as the underlying array changes.</p><p>Additionally, if you try to set the model of an\n<code>Ember.ArrayController</code> to a plain native array, it will raise an\nexception since it no longer implements the <code>Ember.Array</code> interface.</p><p>You can manually coerce a native array into an array that implements the\nrequired interfaces using the convenience method <code>Ember.A</code>:</p>","link":"./v2.2.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.2.0/configuring-ember/disabling-prototype-extensions","title":"Arrays"},{"content":"<h3 id=\"-life-without-prototype-extension-strings\">Strings</h3><p>Strings will no longer have the convenience methods described in the\n<a href=\"http://emberjs.com/api/classes/Ember.String.html\">Ember.String API reference.</a>. Instead,\nyou can use the similarly-named methods of the <code>Ember.String</code> object and\npass the string to use as the first parameter:</p>","link":"./v2.2.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.2.0/configuring-ember/disabling-prototype-extensions","title":"Strings"},{"content":"<h3 id=\"-life-without-prototype-extension-functions\">Functions</h3><p>The <a href=\"../../object-model/\">Object Model</a> section of the Guides describes\nhow to write computed properties, observers, and bindings without\nprototype extensions. Below you can learn about how to convert existing\ncode to the format now encouraged.</p><p>To annotate computed properties, use the <code>Ember.computed()</code> method to\nwrap the function:</p><p>Observers are annotated using <code>Ember.observer()</code>:</p><p>Evented functions are annotated using <code>Ember.on()</code>:</p>","link":"./v2.2.0/configuring-ember/disabling-prototype-extensions.html","spaLink":"#/v2.2.0/configuring-ember/disabling-prototype-extensions","title":"Functions"},{"content":"<h3 id=\"-changing-the-root-element\">Changing the Root Element</h3><p>By default, your application will render the <a href=\"../../routing/defining-your-routes/#toc_the-application-route\">application template</a>\nand attach it to the document’s <code>body</code> element.</p><p>You can tell the application to append the application template to a\ndifferent element by specifying its <code>rootElement</code> property:</p><p>This property can be specified as either an element or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector\nstring</a>.</p>","link":"./v2.2.0/configuring-ember/embedding-applications.html","spaLink":"#/v2.2.0/configuring-ember/embedding-applications","title":"Changing the Root Element"},{"content":"<h3 id=\"-disabling-url-management\">Disabling URL Management</h3><p>You can prevent Ember from making changes to the URL by <a href=\"../specifying-url-type\">changing the\nrouter’s <code>location</code></a> to\n<code>none</code>:</p>","link":"./v2.2.0/configuring-ember/embedding-applications.html","spaLink":"#/v2.2.0/configuring-ember/embedding-applications","title":"Disabling URL Management"},{"content":"<h3 id=\"-specifying-a-root-url\">Specifying a Root URL</h3><p>If your Ember application is one of multiple web applications served from the same domain, it may be necessary to indicate to the router what the root URL for your Ember application is. By default, Ember will assume it is served from the root of your domain.</p><p>For example, if you wanted to serve your blogging application from <code>http://emberjs.com/blog/</code>, it would be necessary to specify a root URL of <code>/blog/</code>.</p><p>This can be achieved by setting the <code>rootURL</code> on the router:</p>","link":"./v2.2.0/configuring-ember/embedding-applications.html","spaLink":"#/v2.2.0/configuring-ember/embedding-applications","title":"Specifying a Root URL"},{"content":"<h2 id=\"-routing\">Routing</h2>","link":"./v2.2.0/configuring-ember/debugging.html","spaLink":"#/v2.2.0/configuring-ember/debugging","title":"ROUTING"},{"content":"<h2 id=\"-views-templates\">Views / Templates</h2>","link":"./v2.2.0/configuring-ember/debugging.html","spaLink":"#/v2.2.0/configuring-ember/debugging","title":"VIEWS / TEMPLATES"},{"content":"<h2 id=\"-controllers\">Controllers</h2>","link":"./v2.2.0/configuring-ember/debugging.html","spaLink":"#/v2.2.0/configuring-ember/debugging","title":"CONTROLLERS"},{"content":"<h2 id=\"-observers-binding\">Observers / Binding</h2>","link":"./v2.2.0/configuring-ember/debugging.html","spaLink":"#/v2.2.0/configuring-ember/debugging","title":"OBSERVERS / BINDING"},{"content":"<h2 id=\"-miscellaneous\">Miscellaneous</h2><p>This option logs all the lookups that are done to the console. Custom objects\nyou’ve created yourself have a tick, and Ember generated ones don’t.</p><p>It’s useful for understanding which objects Ember is finding when it does a lookup\nand which it is generating automatically for you.</p><p>If you are using imports with Ember, be sure to import the console:</p><p>There are times when dealing with promises that it seems like any errors\nare being ‘swallowed’, and not properly raised. This makes it extremely\ndifficult to track down where a given issue is coming from. Thankfully,\n<code>RSVP</code> has a solution for this problem built in.</p><p>You can provide an <code>onerror</code> function that will be called with the error\ndetails if any errors occur within your promise. This function can be anything,\nbut a common practice is to call <code>console.assert</code> to dump the error to the\nconsole.</p><p>Backburner has support for stitching the stacktraces together so that you can\ntrack down where an erroring <code>Ember.run.later</code> is being initiated from. Unfortunately,\nthis is quite slow and is not appropriate for production or even normal development.</p><p>To enable this mode you can set:</p>","link":"./v2.2.0/configuring-ember/debugging.html","spaLink":"#/v2.2.0/configuring-ember/debugging","title":"MISCELLANEOUS"},{"content":"<h2 id=\"-feature-life-cycle\">Feature Life-Cycle</h2><p>A newly-flagged feature is only available in canary builds and can be enabled\nat runtime through your project’s configuration file.</p><p>At the start of a beta cycle the Ember core team evaluates each new feature.\nFeatures deemed stable are made available in the next beta and enabled by default.</p><p>Beta features that receive negative feedback from the community are disabled in the next beta point\nrelease, and are not included in the next stable release. They may still be included\nin the next beta cycle if the issues/concerns are resolved.</p><p>Once the beta cycle has completed, the next stable release will include any features that\nwere enabled during the beta cycle. At this point the feature flags will be removed from\nthe canary and future beta branches, and the feature becomes part of the framework.</p>","link":"./v2.2.0/configuring-ember/feature-flags.html","spaLink":"#/v2.2.0/configuring-ember/feature-flags","title":"FEATURE LIFE-CYCLE"},{"content":"<h2 id=\"-flagging-details\">Flagging Details</h2><p>The flag status in the generated build is controlled by the <a href=\"https://github.com/emberjs/ember.js/blob/master/features.json\"><code>features.json</code></a>\nfile in the root of the Ember.js project. This file lists all new features and their current status.</p><p>A feature can have one of a three flags:</p><ul>\n<li><code>true</code> - The feature is <strong>present</strong> and <strong>enabled</strong>: the code behind the flag is always enabled in\nthe generated build.</li>\n<li><code>null</code> - The feature is <strong>present</strong> but <strong>disabled</strong> in the build output. It must be enabled at\nruntime.</li>\n<li><code>false</code> - The feature is entirely <strong>disabled</strong>: the code behind the flag is not present in\nthe generated build.</li>\n</ul><p>The process of removing the feature flags from the resulting build output is\nhandled by <a href=\"https://github.com/thomasboyt/defeatureify\"><code>defeatureify</code></a>.</p>","link":"./v2.2.0/configuring-ember/feature-flags.html","spaLink":"#/v2.2.0/configuring-ember/feature-flags","title":"FLAGGING DETAILS"},{"content":"<h2 id=\"-feature-listing-featuresmd\">Feature Listing (<a href=\"https://github.com/emberjs/ember.js/blob/master/FEATURES.md\"><code>FEATURES.md</code></a>)</h2><p>When a developer adds a new feature to the <code>canary</code> channel (i.e. the <code>master</code> branch on github), they\nalso add an entry to <a href=\"https://github.com/emberjs/ember.js/blob/master/FEATURES.md\"><code>FEATURES.md</code></a>\nexplaining what the feature does, and linking to their originating pull request.\nThis list is kept current, and reflects what is available in each channel\n(<code>release</code>, <code>beta</code>, and <code>canary</code>).</p>","link":"./v2.2.0/configuring-ember/feature-flags.html","spaLink":"#/v2.2.0/configuring-ember/feature-flags","title":"FEATURE LISTING (FEATURES.MD)"},{"content":"<h2 id=\"-enabling-at-runtime\">Enabling At Runtime</h2><p>When using the Ember.js canary or beta builds you can enable a “<strong>present</strong> but <strong>disabled</strong>“\nfeature by setting its flag value to <code>true</code> before your application boots:</p><p>For the truly ambitious developer, setting <code>ENV.EmberENV.ENABLE_ALL_FEATURES</code> to <code>true</code> will enable all\nexperimental features.</p>","link":"./v2.2.0/configuring-ember/feature-flags.html","spaLink":"#/v2.2.0/configuring-ember/feature-flags","title":"ENABLING AT RUNTIME"},{"content":"<h2 id=\"-history\">history</h2><p>When using <code>history</code>, Ember uses the browser’s\n<a href=\"http://caniuse.com/history\">history</a> API to produce URLs with a structure like\n<code>/posts/new</code>.</p><p>Given the following router, entering <code>/posts/new</code> will take you to the <code>posts.new</code>\nroute.</p><p>Keep in mind that your server must serve the Ember app from all the URLs defined in your\n<code>Router.map</code> function. In other words, if your user directly navigates to\n<code>/posts/new</code>, your server must be configured to serve your Ember app in\nresponse.</p>","link":"./v2.2.0/configuring-ember/specifying-url-type.html","spaLink":"#/v2.2.0/configuring-ember/specifying-url-type","title":"HISTORY"},{"content":"<h2 id=\"-hash\">hash</h2><p>The <code>hash</code> option uses the URL’s anchor to load the starting state of your\napplication and will keep it in sync as you move around. At present, this relies\non a <a href=\"http://caniuse.com/hashchange\">hashchange</a> event existing in the browser.</p><p>In the router example above, entering <code>/#/posts/new</code> will take you to the <code>posts.new</code>\nroute.</p>","link":"./v2.2.0/configuring-ember/specifying-url-type.html","spaLink":"#/v2.2.0/configuring-ember/specifying-url-type","title":"HASH"},{"content":"<h2 id=\"-none\">none</h2><p>Finally, if you don’t want the browser’s URL to interact with your application\nat all, you can disable the location API entirely by setting <code>ENV.locationType</code>\nto <code>none</code>. This is useful for\ntesting, or when you don’t want Ember to muck with the URL (for example when you embed your\napplication in a larger page).</p>","link":"./v2.2.0/configuring-ember/specifying-url-type.html","spaLink":"#/v2.2.0/configuring-ember/specifying-url-type","title":"NONE"},{"content":"<h2 id=\"-filtering-deprecations\">Filtering Deprecations</h2><p>When your project has a lot of deprecations, you can start by filtering out deprecations that do not have to be addressed right away.  You\ncan use the <a href=\"http://emberjs.com/api/classes/Ember.Debug.html#method_registerDeprecationHandler\">deprecation handlers</a> API to check for what\nrelease a deprecated feature will be removed.  An example handler is shown below that filters out all deprecations that are not going away\nin release 2.0.0.</p><p>The deprecation handler API was released in Ember 2.1.  If you would like to leverage this API in a prior release of Ember you can install\nthe <a href=\"http://emberobserver.com/addons/ember-debug-handlers-polyfill\">ember-debug-handlers-polyfill</a> addon into your project.</p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"FILTERING DEPRECATIONS"},{"content":"<h2 id=\"-deprecation-workflow\">Deprecation Workflow</h2><p>Once you’ve removed deprecations that you may not need to immediately address, you may still be left with many deprecations.  Also, your remaining\ndeprecations may only occur in very specific scenarios that are not obvious.  How then should you go about finding and fixing these?  This\nis where the <a href=\"http://emberobserver.com/addons/ember-cli-deprecation-workflow\">ember-cli-deprecation-workflow</a> addon can be extremely helpful.</p><p>Once installed, the addon works in 3 steps:</p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"DEPRECATION WORKFLOW"},{"content":"<h3 id=\"-deprecation-workflow-1-gather-deprecations-into-one-source\">1. Gather deprecations into one source</h3><p>The ember-cli-deprecation-workflow addon provides a command that will collect deprecations from your console and generate JavaScript code listing\nits findings.</p><p>To collect deprecations, first run your in-browser test suite by starting your development server and navigating to <code>http://localhost:4200/tests</code>.  If your test suite isn’t fully covering your app’s functionality, you may also\nmanually exercise functionality within your app where needed.  Once you’ve exercised the app to your satisfaction, run the following command within\nyour browser console: <code>deprecationWorkflow.flushDeprecations()</code>.  This will print to the console JavaScript code, which you should then copy to a\nnew file in your project called <code>/config/deprecation-workflow.js</code></p><p><img width=\"675px\" title=\"Generated Deprecation Code from Browser Console\" src=\"../../images/guides/configuring-ember/handling-deprecations/generate-deprecation-code.png\"></p><p>Here’s an example of a deprecation-workflow file after generated from the console:</p><p>You might notice that you have a lot of duplicated messages in your workflow file, like the 3 messages in the above example that start with\n<code>Accessing 'template' in...</code>.  This is because some of the deprecation messages provide context to the specific deprecation, making them\ndifferent than the same deprecation in other parts of the app.  If you want to consolidate the\nduplication, you can use a simple regular expression with a wildcard (<code>.*</code>) for the part of the message that varies per instance.</p><p>Below is the same deprecation-workflow file as above, now with a regular expression on line 7 to remove some redundant messages. Note that the double quotes around <code>matchMessage</code> have also been replaced with forward slashes.</p><p>Rerun your test suite as you make updates to your workflow file and you should validate that your deprecations are gone. Once that is completed,\nyou can proceed with enhancing your application without the sea of deprecation warnings clouding your log.</p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"1. Gather deprecations into one source"},{"content":"<h3 id=\"-deprecation-workflow-2-turn-on-a-deprecation\">2. “Turn on” a deprecation</h3><p>Once you have built your <code>deprecation-workflow.js</code> file and your deprecations are silenced, you can begin to work on deprecations one by one\nat your own leisure.  To find deprecations, you can change the handler value of that message to either <code>throw</code> or <code>log</code>.  Throw will\nthrow an actual exception when the deprecation is encountered, so that tests that use the deprecated feature will fail.  Choosing to log will\nsimply log a warning to the console as before.  These settings give you some flexibility on how you want to go about fixing the\ndeprecations.</p><p>The code below is the deprecation-workflow file with the first deprecation set to throw an exception on occurrence.  The image demonstrates what\nthat deprecation looks like when you run your tests.</p><p><img width=\"675px\" src=\"../../images/guides/configuring-ember/handling-deprecations/failed-test-from-deprecation.png\"></p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"2. “Turn on” a deprecation"},{"content":"<h3 id=\"-deprecation-workflow-3-fix-and-repeat\">3. Fix and Repeat</h3><p>After fixing a deprecation and getting your scenarios working again, you might want to leave the deprecation message in the workflow file with the\nthrow handler enabled.  This will ensure you haven’t missed anything, and ensure no new deprecated calls of that type are introduced to your project.\nNext, it’s just a matter of going down the list, updating the handler, and fixing each remaining deprecation.</p><p>In the end, your deprecations can be fully turned on as “throw” and you should be able to use your application without error.  At this point, you can\ngo ahead and update your Ember version!  When you upgrade, be sure you remove the deprecations you’ve fixed from the deprecation workflow file,\nso that you can start the process over for the next release.</p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"3. Fix and Repeat"},{"content":"<h2 id=\"-silencing-deprecation-warnings-during-compile\">Silencing Deprecation Warnings During Compile</h2><p>As you upgrade between releases, you might also notice that your terminal log begins to stream template-related deprecation warnings during the compile process, making\nit difficult to review your compilation logs.</p><p><img width=\"675px\" src=\"../../images/guides/configuring-ember/handling-deprecations/compile-deprecations.png\" title=\"Compile Deprecations Clouding Log\"></p><p>If you are using the deprecation workflow process above, you will likely prefer to gather these warnings during runtime execution instead.  The way to hide these\nwarnings during compile is to install the <a href=\"http://emberobserver.com/addons/ember-cli-template-lint\">ember-cli-template-lint</a> addon.  It suppresses\ntemplate deprecation warnings during compile in favor of showing them in the browser console during test suite execution or application usage.</p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"SILENCING DEPRECATION WARNINGS DURING COMPILE"},{"content":"<h2 id=\"-deprecation-handling-in-ember-inspector\">Deprecation Handling in Ember Inspector</h2><p>Ember Inspector also provides deprecation handling capability.  It can work complimentary to ember-cli-deprecation-workflow.  As you unsilence deprecations to\nfix them, the inspector can allow you to more quickly find where in your code a deprecation occurs when you run into it at runtime, reducing the amount of\nstack trace browsing you have to do.  For more information on using deprecation handling in Ember Inspector, see its <a href=\"../../ember-inspector/deprecations/\">guides section</a>.</p>","link":"./v2.2.0/configuring-ember/handling-deprecations.html","spaLink":"#/v2.2.0/configuring-ember/handling-deprecations","title":"DEPRECATION HANDLING IN EMBER INSPECTOR"},{"content":"<h1 id=\"main-repositories\">Main Repositories</h1><p><strong>Ember.js</strong> - The main repository for Ember.</p><ul>\n<li><a href=\"https://github.com/emberjs/ember.js\"></a><a href=\"https://github.com/emberjs/ember.js\">https://github.com/emberjs/ember.js</a></li>\n</ul><p><strong>Ember Data</strong> - A data persistence library for Ember.</p><ul>\n<li><a href=\"https://github.com/emberjs/data\"></a><a href=\"https://github.com/emberjs/data\">https://github.com/emberjs/data</a></li>\n</ul><p><strong>Ember Website</strong> - Source for <a href=\"http://emberjs.com\"></a><a href=\"http://emberjs.com\">http://emberjs.com</a></p><ul>\n<li><a href=\"https://github.com/emberjs/website\"></a><a href=\"https://github.com/emberjs/website\">https://github.com/emberjs/website</a></li>\n</ul><p><strong>Ember Guides</strong> - Source for <a href=\"http://guides.emberjs.com\"></a><a href=\"http://guides.emberjs.com\">http://guides.emberjs.com</a> which you are currently reading.</p><ul>\n<li><a href=\"https://github.com/emberjs/guides\"></a><a href=\"https://github.com/emberjs/guides\">https://github.com/emberjs/guides</a></li>\n</ul>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"MAIN REPOSITORIES"},{"content":"<h1 id=\"libraries-used-by-ember\">Libraries Used By Ember</h1><p>These libraries are part of the Ember.js source, but development of them takes place in a separate repository.</p>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"LIBRARIES USED BY EMBER"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-metallibvendorbackburnerjs\"><code>packages/ember-metal/lib/vendor/backburner.js</code></h2><ul>\n<li><strong>backburner.js</strong> - Implements the Ember run loop.</li>\n<li><a href=\"https://github.com/ebryn/backburner.js\"></a><a href=\"https://github.com/ebryn/backburner.js\">https://github.com/ebryn/backburner.js</a></li>\n</ul>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"PACKAGES/EMBER-METAL/LIB/VENDOR/BACKBURNER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-routinglibvendorroute-recognizerjs\"><code>packages/ember-routing/lib/vendor/route-recognizer.js</code></h2><ul>\n<li><strong>route-recognizer.js</strong> - A lightweight JavaScript library that matches paths against registered routes.</li>\n<li><a href=\"https://github.com/tildeio/route-recognizer\"></a><a href=\"https://github.com/tildeio/route-recognizer\">https://github.com/tildeio/route-recognizer</a></li>\n</ul>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"PACKAGES/EMBER-ROUTING/LIB/VENDOR/ROUTE-RECOGNIZER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesember-routinglibvendorrouterjs\"><code>packages/ember-routing/lib/vendor/router.js</code></h2><ul>\n<li><strong>router.js</strong> - A lightweight JavaScript library that builds on route-recognizer and rsvp to provide an API for handling routes.</li>\n<li><a href=\"https://github.com/tildeio/router.js\"></a><a href=\"https://github.com/tildeio/router.js\">https://github.com/tildeio/router.js</a></li>\n</ul>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"PACKAGES/EMBER-ROUTING/LIB/VENDOR/ROUTER.JS"},{"content":"<h2 id=\"libraries-used-by-ember-packagesmetamorph\"><code>packages/metamorph</code></h2><ul>\n<li><strong>Metamorph.js</strong> - Used by Ember for databinding handlebars templates</li>\n<li><a href=\"https://github.com/tomhuda/metamorph.js\"></a><a href=\"https://github.com/tomhuda/metamorph.js\">https://github.com/tomhuda/metamorph.js</a></li>\n</ul>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"PACKAGES/METAMORPH"},{"content":"<h2 id=\"libraries-used-by-ember-packagesrsvp\"><code>packages/rsvp</code></h2><ul>\n<li><strong>RSVP.js</strong> - Implementation of the of Promises/A+ spec used by Ember.</li>\n<li><a href=\"https://github.com/tildeio/rsvp.js\"></a><a href=\"https://github.com/tildeio/rsvp.js\">https://github.com/tildeio/rsvp.js</a></li>\n</ul>","link":"./v2.2.0/contributing/repositories.html","spaLink":"#/v2.2.0/contributing/repositories","title":"PACKAGES/RSVP"},{"content":"<h3 id=\"-bug-fixes\">Bug Fixes</h3><p>Urgent bugfixes are bugfixes that need to be applied to the existing\nrelease branch. If possible, they should be made on master and prefixed\nwith [BUGFIX release].</p><p>Beta bugfixes are bugfixes that need to be applied to the beta branch.\nIf possible, they should be made on master and tagged with [BUGFIX\nbeta].</p><p>Security fixes need to be applied to the beta branch, the current\nrelease branch, and the previous tag. If possible, they should be made\non master and tagged with [SECURITY].</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"Bug Fixes"},{"content":"<h3 id=\"-features\">Features</h3><p>Features must always be wrapped in a feature flag. Tests for the feature\nmust also be wrapped in a feature flag.</p><p>Because the build-tools will process feature-flags, flags must use\nprecisely this format. We are choosing conditionals rather than a block\nform because functions change the surrounding scope and may introduce\nproblems with early return.</p><p>Tests will always run with all features on, so make sure that any tests\nfor the feature are passing against the current state of the feature.</p><p>Commits related to a specific feature should include  a prefix like\n[FEATURE htmlbars]. This will allow us to quickly identify all commits\nfor a specific feature in the future. Features will never be applied to\nbeta or release branches. Once a beta or release branch has been cut, it\ncontains all of the new features it will ever have.</p><p>If a feature has made it into beta or release, and you make a commit to\nmaster that fixes a bug in the feature, treat it like a bugfix as\ndescribed above.</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"Features"},{"content":"<h3 id=\"-builds\">Builds</h3><p>The Canary build, which is based off master, will include all features,\nguarded by the conditionals in the original source. This means that\nusers of the canary build can enable whatever features they want by\nenabling them before creating their Ember.Application.</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"Builds"},{"content":"<h3 id=\"-featuresjson\"><code>features.json</code></h3><p>The root of the repository will contain a features.json file, which will\ncontain a list of features that should be enabled for beta or release\nbuilds.</p><p>This file is populated when branching, and may not gain additional\nfeatures after the original branch. It may remove features.</p><p>The build process will remove any features not included in the list, and\nremove the conditionals for features in the list.</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"features.json"},{"content":"<h3 id=\"-travis-testing\">Travis Testing</h3><p>For a new PR:</p><p>For a new commit to master:</p><p>The idea is that new commits should be submitted as PRs to ensure they\napply cleanly, and once the merge button is pressed, Travis will apply\nthem to the right branches.</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"Travis Testing"},{"content":"<h3 id=\"-gono-go-process\">Go/No-Go Process</h3><p>Every six weeks, the core team goes through the following process.</p><p>All remaining features on the beta branch are vetted for readiness. If\nany feature isn’t ready, it is removed from features.json.</p><p>Once this is done, the beta branch is tagged and merged into release.</p><p>All features on the master branch are vetted for readiness. In order for\na feature to be considered “ready” at this stage, it must be ready as-is\nwith no blockers. Features are a no-go even if they are close and\nadditional work on the beta branch would make it ready.</p><p>Because this process happens every six weeks, there will be another\nopportunity for a feature to make it soon enough.</p><p>Once this is done, the master branch is merged into beta. A\n<code>features.json</code> file is added with the features that are ready.</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"Go/No-Go Process"},{"content":"<h3 id=\"-beta-releases\">Beta Releases</h3><p>Every week, we repeat the Go/No-Go process for the features that remain\non the beta branch. Any feature that has become unready is removed from\nthe features.json.</p><p>Once this is done, a Beta release is tagged and pushed.</p>","link":"./v2.2.0/contributing/adding-new-features.html","spaLink":"#/v2.2.0/contributing/adding-new-features","title":"Beta Releases"}]